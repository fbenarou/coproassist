
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Copropriete
 * 
 */
export type Copropriete = $Result.DefaultSelection<Prisma.$CoproprietePayload>
/**
 * Model Lot
 * 
 */
export type Lot = $Result.DefaultSelection<Prisma.$LotPayload>
/**
 * Model Coproprietaire
 * 
 */
export type Coproprietaire = $Result.DefaultSelection<Prisma.$CoproprietairePayload>
/**
 * Model Appartenance
 * 
 */
export type Appartenance = $Result.DefaultSelection<Prisma.$AppartenancePayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Coproprietes
 * const coproprietes = await prisma.copropriete.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Coproprietes
   * const coproprietes = await prisma.copropriete.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.copropriete`: Exposes CRUD operations for the **Copropriete** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Coproprietes
    * const coproprietes = await prisma.copropriete.findMany()
    * ```
    */
  get copropriete(): Prisma.CoproprieteDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.lot`: Exposes CRUD operations for the **Lot** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Lots
    * const lots = await prisma.lot.findMany()
    * ```
    */
  get lot(): Prisma.LotDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.coproprietaire`: Exposes CRUD operations for the **Coproprietaire** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Coproprietaires
    * const coproprietaires = await prisma.coproprietaire.findMany()
    * ```
    */
  get coproprietaire(): Prisma.CoproprietaireDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.appartenance`: Exposes CRUD operations for the **Appartenance** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Appartenances
    * const appartenances = await prisma.appartenance.findMany()
    * ```
    */
  get appartenance(): Prisma.AppartenanceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.6.0
   * Query Engine version: f676762280b54cd07c770017ed3711ddde35f37a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Copropriete: 'Copropriete',
    Lot: 'Lot',
    Coproprietaire: 'Coproprietaire',
    Appartenance: 'Appartenance',
    User: 'User'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "copropriete" | "lot" | "coproprietaire" | "appartenance" | "user"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Copropriete: {
        payload: Prisma.$CoproprietePayload<ExtArgs>
        fields: Prisma.CoproprieteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CoproprieteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoproprietePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CoproprieteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoproprietePayload>
          }
          findFirst: {
            args: Prisma.CoproprieteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoproprietePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CoproprieteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoproprietePayload>
          }
          findMany: {
            args: Prisma.CoproprieteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoproprietePayload>[]
          }
          create: {
            args: Prisma.CoproprieteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoproprietePayload>
          }
          createMany: {
            args: Prisma.CoproprieteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CoproprieteCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoproprietePayload>[]
          }
          delete: {
            args: Prisma.CoproprieteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoproprietePayload>
          }
          update: {
            args: Prisma.CoproprieteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoproprietePayload>
          }
          deleteMany: {
            args: Prisma.CoproprieteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CoproprieteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CoproprieteUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoproprietePayload>[]
          }
          upsert: {
            args: Prisma.CoproprieteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoproprietePayload>
          }
          aggregate: {
            args: Prisma.CoproprieteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCopropriete>
          }
          groupBy: {
            args: Prisma.CoproprieteGroupByArgs<ExtArgs>
            result: $Utils.Optional<CoproprieteGroupByOutputType>[]
          }
          count: {
            args: Prisma.CoproprieteCountArgs<ExtArgs>
            result: $Utils.Optional<CoproprieteCountAggregateOutputType> | number
          }
        }
      }
      Lot: {
        payload: Prisma.$LotPayload<ExtArgs>
        fields: Prisma.LotFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LotFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LotPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LotFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LotPayload>
          }
          findFirst: {
            args: Prisma.LotFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LotPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LotFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LotPayload>
          }
          findMany: {
            args: Prisma.LotFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LotPayload>[]
          }
          create: {
            args: Prisma.LotCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LotPayload>
          }
          createMany: {
            args: Prisma.LotCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LotCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LotPayload>[]
          }
          delete: {
            args: Prisma.LotDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LotPayload>
          }
          update: {
            args: Prisma.LotUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LotPayload>
          }
          deleteMany: {
            args: Prisma.LotDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LotUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LotUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LotPayload>[]
          }
          upsert: {
            args: Prisma.LotUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LotPayload>
          }
          aggregate: {
            args: Prisma.LotAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLot>
          }
          groupBy: {
            args: Prisma.LotGroupByArgs<ExtArgs>
            result: $Utils.Optional<LotGroupByOutputType>[]
          }
          count: {
            args: Prisma.LotCountArgs<ExtArgs>
            result: $Utils.Optional<LotCountAggregateOutputType> | number
          }
        }
      }
      Coproprietaire: {
        payload: Prisma.$CoproprietairePayload<ExtArgs>
        fields: Prisma.CoproprietaireFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CoproprietaireFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoproprietairePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CoproprietaireFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoproprietairePayload>
          }
          findFirst: {
            args: Prisma.CoproprietaireFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoproprietairePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CoproprietaireFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoproprietairePayload>
          }
          findMany: {
            args: Prisma.CoproprietaireFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoproprietairePayload>[]
          }
          create: {
            args: Prisma.CoproprietaireCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoproprietairePayload>
          }
          createMany: {
            args: Prisma.CoproprietaireCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CoproprietaireCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoproprietairePayload>[]
          }
          delete: {
            args: Prisma.CoproprietaireDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoproprietairePayload>
          }
          update: {
            args: Prisma.CoproprietaireUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoproprietairePayload>
          }
          deleteMany: {
            args: Prisma.CoproprietaireDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CoproprietaireUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CoproprietaireUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoproprietairePayload>[]
          }
          upsert: {
            args: Prisma.CoproprietaireUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoproprietairePayload>
          }
          aggregate: {
            args: Prisma.CoproprietaireAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCoproprietaire>
          }
          groupBy: {
            args: Prisma.CoproprietaireGroupByArgs<ExtArgs>
            result: $Utils.Optional<CoproprietaireGroupByOutputType>[]
          }
          count: {
            args: Prisma.CoproprietaireCountArgs<ExtArgs>
            result: $Utils.Optional<CoproprietaireCountAggregateOutputType> | number
          }
        }
      }
      Appartenance: {
        payload: Prisma.$AppartenancePayload<ExtArgs>
        fields: Prisma.AppartenanceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AppartenanceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppartenancePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AppartenanceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppartenancePayload>
          }
          findFirst: {
            args: Prisma.AppartenanceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppartenancePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AppartenanceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppartenancePayload>
          }
          findMany: {
            args: Prisma.AppartenanceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppartenancePayload>[]
          }
          create: {
            args: Prisma.AppartenanceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppartenancePayload>
          }
          createMany: {
            args: Prisma.AppartenanceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AppartenanceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppartenancePayload>[]
          }
          delete: {
            args: Prisma.AppartenanceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppartenancePayload>
          }
          update: {
            args: Prisma.AppartenanceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppartenancePayload>
          }
          deleteMany: {
            args: Prisma.AppartenanceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AppartenanceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AppartenanceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppartenancePayload>[]
          }
          upsert: {
            args: Prisma.AppartenanceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppartenancePayload>
          }
          aggregate: {
            args: Prisma.AppartenanceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAppartenance>
          }
          groupBy: {
            args: Prisma.AppartenanceGroupByArgs<ExtArgs>
            result: $Utils.Optional<AppartenanceGroupByOutputType>[]
          }
          count: {
            args: Prisma.AppartenanceCountArgs<ExtArgs>
            result: $Utils.Optional<AppartenanceCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    copropriete?: CoproprieteOmit
    lot?: LotOmit
    coproprietaire?: CoproprietaireOmit
    appartenance?: AppartenanceOmit
    user?: UserOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type CoproprieteCountOutputType
   */

  export type CoproprieteCountOutputType = {
    lots: number
  }

  export type CoproprieteCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lots?: boolean | CoproprieteCountOutputTypeCountLotsArgs
  }

  // Custom InputTypes
  /**
   * CoproprieteCountOutputType without action
   */
  export type CoproprieteCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoproprieteCountOutputType
     */
    select?: CoproprieteCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CoproprieteCountOutputType without action
   */
  export type CoproprieteCountOutputTypeCountLotsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LotWhereInput
  }


  /**
   * Count Type LotCountOutputType
   */

  export type LotCountOutputType = {
    appartenances: number
  }

  export type LotCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    appartenances?: boolean | LotCountOutputTypeCountAppartenancesArgs
  }

  // Custom InputTypes
  /**
   * LotCountOutputType without action
   */
  export type LotCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LotCountOutputType
     */
    select?: LotCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LotCountOutputType without action
   */
  export type LotCountOutputTypeCountAppartenancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppartenanceWhereInput
  }


  /**
   * Count Type CoproprietaireCountOutputType
   */

  export type CoproprietaireCountOutputType = {
    appartenances: number
  }

  export type CoproprietaireCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    appartenances?: boolean | CoproprietaireCountOutputTypeCountAppartenancesArgs
  }

  // Custom InputTypes
  /**
   * CoproprietaireCountOutputType without action
   */
  export type CoproprietaireCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoproprietaireCountOutputType
     */
    select?: CoproprietaireCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CoproprietaireCountOutputType without action
   */
  export type CoproprietaireCountOutputTypeCountAppartenancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppartenanceWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Copropriete
   */

  export type AggregateCopropriete = {
    _count: CoproprieteCountAggregateOutputType | null
    _avg: CoproprieteAvgAggregateOutputType | null
    _sum: CoproprieteSumAggregateOutputType | null
    _min: CoproprieteMinAggregateOutputType | null
    _max: CoproprieteMaxAggregateOutputType | null
  }

  export type CoproprieteAvgAggregateOutputType = {
    id: number | null
  }

  export type CoproprieteSumAggregateOutputType = {
    id: number | null
  }

  export type CoproprieteMinAggregateOutputType = {
    id: number | null
    nom: string | null
  }

  export type CoproprieteMaxAggregateOutputType = {
    id: number | null
    nom: string | null
  }

  export type CoproprieteCountAggregateOutputType = {
    id: number
    nom: number
    _all: number
  }


  export type CoproprieteAvgAggregateInputType = {
    id?: true
  }

  export type CoproprieteSumAggregateInputType = {
    id?: true
  }

  export type CoproprieteMinAggregateInputType = {
    id?: true
    nom?: true
  }

  export type CoproprieteMaxAggregateInputType = {
    id?: true
    nom?: true
  }

  export type CoproprieteCountAggregateInputType = {
    id?: true
    nom?: true
    _all?: true
  }

  export type CoproprieteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Copropriete to aggregate.
     */
    where?: CoproprieteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Coproprietes to fetch.
     */
    orderBy?: CoproprieteOrderByWithRelationInput | CoproprieteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CoproprieteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Coproprietes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Coproprietes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Coproprietes
    **/
    _count?: true | CoproprieteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CoproprieteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CoproprieteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CoproprieteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CoproprieteMaxAggregateInputType
  }

  export type GetCoproprieteAggregateType<T extends CoproprieteAggregateArgs> = {
        [P in keyof T & keyof AggregateCopropriete]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCopropriete[P]>
      : GetScalarType<T[P], AggregateCopropriete[P]>
  }




  export type CoproprieteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CoproprieteWhereInput
    orderBy?: CoproprieteOrderByWithAggregationInput | CoproprieteOrderByWithAggregationInput[]
    by: CoproprieteScalarFieldEnum[] | CoproprieteScalarFieldEnum
    having?: CoproprieteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CoproprieteCountAggregateInputType | true
    _avg?: CoproprieteAvgAggregateInputType
    _sum?: CoproprieteSumAggregateInputType
    _min?: CoproprieteMinAggregateInputType
    _max?: CoproprieteMaxAggregateInputType
  }

  export type CoproprieteGroupByOutputType = {
    id: number
    nom: string
    _count: CoproprieteCountAggregateOutputType | null
    _avg: CoproprieteAvgAggregateOutputType | null
    _sum: CoproprieteSumAggregateOutputType | null
    _min: CoproprieteMinAggregateOutputType | null
    _max: CoproprieteMaxAggregateOutputType | null
  }

  type GetCoproprieteGroupByPayload<T extends CoproprieteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CoproprieteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CoproprieteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CoproprieteGroupByOutputType[P]>
            : GetScalarType<T[P], CoproprieteGroupByOutputType[P]>
        }
      >
    >


  export type CoproprieteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
    lots?: boolean | Copropriete$lotsArgs<ExtArgs>
    _count?: boolean | CoproprieteCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["copropriete"]>

  export type CoproprieteSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
  }, ExtArgs["result"]["copropriete"]>

  export type CoproprieteSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
  }, ExtArgs["result"]["copropriete"]>

  export type CoproprieteSelectScalar = {
    id?: boolean
    nom?: boolean
  }

  export type CoproprieteOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nom", ExtArgs["result"]["copropriete"]>
  export type CoproprieteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lots?: boolean | Copropriete$lotsArgs<ExtArgs>
    _count?: boolean | CoproprieteCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CoproprieteIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type CoproprieteIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CoproprietePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Copropriete"
    objects: {
      lots: Prisma.$LotPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nom: string
    }, ExtArgs["result"]["copropriete"]>
    composites: {}
  }

  type CoproprieteGetPayload<S extends boolean | null | undefined | CoproprieteDefaultArgs> = $Result.GetResult<Prisma.$CoproprietePayload, S>

  type CoproprieteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CoproprieteFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CoproprieteCountAggregateInputType | true
    }

  export interface CoproprieteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Copropriete'], meta: { name: 'Copropriete' } }
    /**
     * Find zero or one Copropriete that matches the filter.
     * @param {CoproprieteFindUniqueArgs} args - Arguments to find a Copropriete
     * @example
     * // Get one Copropriete
     * const copropriete = await prisma.copropriete.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CoproprieteFindUniqueArgs>(args: SelectSubset<T, CoproprieteFindUniqueArgs<ExtArgs>>): Prisma__CoproprieteClient<$Result.GetResult<Prisma.$CoproprietePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Copropriete that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CoproprieteFindUniqueOrThrowArgs} args - Arguments to find a Copropriete
     * @example
     * // Get one Copropriete
     * const copropriete = await prisma.copropriete.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CoproprieteFindUniqueOrThrowArgs>(args: SelectSubset<T, CoproprieteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CoproprieteClient<$Result.GetResult<Prisma.$CoproprietePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Copropriete that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoproprieteFindFirstArgs} args - Arguments to find a Copropriete
     * @example
     * // Get one Copropriete
     * const copropriete = await prisma.copropriete.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CoproprieteFindFirstArgs>(args?: SelectSubset<T, CoproprieteFindFirstArgs<ExtArgs>>): Prisma__CoproprieteClient<$Result.GetResult<Prisma.$CoproprietePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Copropriete that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoproprieteFindFirstOrThrowArgs} args - Arguments to find a Copropriete
     * @example
     * // Get one Copropriete
     * const copropriete = await prisma.copropriete.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CoproprieteFindFirstOrThrowArgs>(args?: SelectSubset<T, CoproprieteFindFirstOrThrowArgs<ExtArgs>>): Prisma__CoproprieteClient<$Result.GetResult<Prisma.$CoproprietePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Coproprietes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoproprieteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Coproprietes
     * const coproprietes = await prisma.copropriete.findMany()
     * 
     * // Get first 10 Coproprietes
     * const coproprietes = await prisma.copropriete.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const coproprieteWithIdOnly = await prisma.copropriete.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CoproprieteFindManyArgs>(args?: SelectSubset<T, CoproprieteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoproprietePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Copropriete.
     * @param {CoproprieteCreateArgs} args - Arguments to create a Copropriete.
     * @example
     * // Create one Copropriete
     * const Copropriete = await prisma.copropriete.create({
     *   data: {
     *     // ... data to create a Copropriete
     *   }
     * })
     * 
     */
    create<T extends CoproprieteCreateArgs>(args: SelectSubset<T, CoproprieteCreateArgs<ExtArgs>>): Prisma__CoproprieteClient<$Result.GetResult<Prisma.$CoproprietePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Coproprietes.
     * @param {CoproprieteCreateManyArgs} args - Arguments to create many Coproprietes.
     * @example
     * // Create many Coproprietes
     * const copropriete = await prisma.copropriete.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CoproprieteCreateManyArgs>(args?: SelectSubset<T, CoproprieteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Coproprietes and returns the data saved in the database.
     * @param {CoproprieteCreateManyAndReturnArgs} args - Arguments to create many Coproprietes.
     * @example
     * // Create many Coproprietes
     * const copropriete = await prisma.copropriete.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Coproprietes and only return the `id`
     * const coproprieteWithIdOnly = await prisma.copropriete.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CoproprieteCreateManyAndReturnArgs>(args?: SelectSubset<T, CoproprieteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoproprietePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Copropriete.
     * @param {CoproprieteDeleteArgs} args - Arguments to delete one Copropriete.
     * @example
     * // Delete one Copropriete
     * const Copropriete = await prisma.copropriete.delete({
     *   where: {
     *     // ... filter to delete one Copropriete
     *   }
     * })
     * 
     */
    delete<T extends CoproprieteDeleteArgs>(args: SelectSubset<T, CoproprieteDeleteArgs<ExtArgs>>): Prisma__CoproprieteClient<$Result.GetResult<Prisma.$CoproprietePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Copropriete.
     * @param {CoproprieteUpdateArgs} args - Arguments to update one Copropriete.
     * @example
     * // Update one Copropriete
     * const copropriete = await prisma.copropriete.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CoproprieteUpdateArgs>(args: SelectSubset<T, CoproprieteUpdateArgs<ExtArgs>>): Prisma__CoproprieteClient<$Result.GetResult<Prisma.$CoproprietePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Coproprietes.
     * @param {CoproprieteDeleteManyArgs} args - Arguments to filter Coproprietes to delete.
     * @example
     * // Delete a few Coproprietes
     * const { count } = await prisma.copropriete.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CoproprieteDeleteManyArgs>(args?: SelectSubset<T, CoproprieteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Coproprietes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoproprieteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Coproprietes
     * const copropriete = await prisma.copropriete.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CoproprieteUpdateManyArgs>(args: SelectSubset<T, CoproprieteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Coproprietes and returns the data updated in the database.
     * @param {CoproprieteUpdateManyAndReturnArgs} args - Arguments to update many Coproprietes.
     * @example
     * // Update many Coproprietes
     * const copropriete = await prisma.copropriete.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Coproprietes and only return the `id`
     * const coproprieteWithIdOnly = await prisma.copropriete.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CoproprieteUpdateManyAndReturnArgs>(args: SelectSubset<T, CoproprieteUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoproprietePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Copropriete.
     * @param {CoproprieteUpsertArgs} args - Arguments to update or create a Copropriete.
     * @example
     * // Update or create a Copropriete
     * const copropriete = await prisma.copropriete.upsert({
     *   create: {
     *     // ... data to create a Copropriete
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Copropriete we want to update
     *   }
     * })
     */
    upsert<T extends CoproprieteUpsertArgs>(args: SelectSubset<T, CoproprieteUpsertArgs<ExtArgs>>): Prisma__CoproprieteClient<$Result.GetResult<Prisma.$CoproprietePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Coproprietes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoproprieteCountArgs} args - Arguments to filter Coproprietes to count.
     * @example
     * // Count the number of Coproprietes
     * const count = await prisma.copropriete.count({
     *   where: {
     *     // ... the filter for the Coproprietes we want to count
     *   }
     * })
    **/
    count<T extends CoproprieteCountArgs>(
      args?: Subset<T, CoproprieteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CoproprieteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Copropriete.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoproprieteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CoproprieteAggregateArgs>(args: Subset<T, CoproprieteAggregateArgs>): Prisma.PrismaPromise<GetCoproprieteAggregateType<T>>

    /**
     * Group by Copropriete.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoproprieteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CoproprieteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CoproprieteGroupByArgs['orderBy'] }
        : { orderBy?: CoproprieteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CoproprieteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCoproprieteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Copropriete model
   */
  readonly fields: CoproprieteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Copropriete.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CoproprieteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    lots<T extends Copropriete$lotsArgs<ExtArgs> = {}>(args?: Subset<T, Copropriete$lotsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LotPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Copropriete model
   */
  interface CoproprieteFieldRefs {
    readonly id: FieldRef<"Copropriete", 'Int'>
    readonly nom: FieldRef<"Copropriete", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Copropriete findUnique
   */
  export type CoproprieteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Copropriete
     */
    select?: CoproprieteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Copropriete
     */
    omit?: CoproprieteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoproprieteInclude<ExtArgs> | null
    /**
     * Filter, which Copropriete to fetch.
     */
    where: CoproprieteWhereUniqueInput
  }

  /**
   * Copropriete findUniqueOrThrow
   */
  export type CoproprieteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Copropriete
     */
    select?: CoproprieteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Copropriete
     */
    omit?: CoproprieteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoproprieteInclude<ExtArgs> | null
    /**
     * Filter, which Copropriete to fetch.
     */
    where: CoproprieteWhereUniqueInput
  }

  /**
   * Copropriete findFirst
   */
  export type CoproprieteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Copropriete
     */
    select?: CoproprieteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Copropriete
     */
    omit?: CoproprieteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoproprieteInclude<ExtArgs> | null
    /**
     * Filter, which Copropriete to fetch.
     */
    where?: CoproprieteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Coproprietes to fetch.
     */
    orderBy?: CoproprieteOrderByWithRelationInput | CoproprieteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Coproprietes.
     */
    cursor?: CoproprieteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Coproprietes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Coproprietes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Coproprietes.
     */
    distinct?: CoproprieteScalarFieldEnum | CoproprieteScalarFieldEnum[]
  }

  /**
   * Copropriete findFirstOrThrow
   */
  export type CoproprieteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Copropriete
     */
    select?: CoproprieteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Copropriete
     */
    omit?: CoproprieteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoproprieteInclude<ExtArgs> | null
    /**
     * Filter, which Copropriete to fetch.
     */
    where?: CoproprieteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Coproprietes to fetch.
     */
    orderBy?: CoproprieteOrderByWithRelationInput | CoproprieteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Coproprietes.
     */
    cursor?: CoproprieteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Coproprietes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Coproprietes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Coproprietes.
     */
    distinct?: CoproprieteScalarFieldEnum | CoproprieteScalarFieldEnum[]
  }

  /**
   * Copropriete findMany
   */
  export type CoproprieteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Copropriete
     */
    select?: CoproprieteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Copropriete
     */
    omit?: CoproprieteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoproprieteInclude<ExtArgs> | null
    /**
     * Filter, which Coproprietes to fetch.
     */
    where?: CoproprieteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Coproprietes to fetch.
     */
    orderBy?: CoproprieteOrderByWithRelationInput | CoproprieteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Coproprietes.
     */
    cursor?: CoproprieteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Coproprietes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Coproprietes.
     */
    skip?: number
    distinct?: CoproprieteScalarFieldEnum | CoproprieteScalarFieldEnum[]
  }

  /**
   * Copropriete create
   */
  export type CoproprieteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Copropriete
     */
    select?: CoproprieteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Copropriete
     */
    omit?: CoproprieteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoproprieteInclude<ExtArgs> | null
    /**
     * The data needed to create a Copropriete.
     */
    data: XOR<CoproprieteCreateInput, CoproprieteUncheckedCreateInput>
  }

  /**
   * Copropriete createMany
   */
  export type CoproprieteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Coproprietes.
     */
    data: CoproprieteCreateManyInput | CoproprieteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Copropriete createManyAndReturn
   */
  export type CoproprieteCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Copropriete
     */
    select?: CoproprieteSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Copropriete
     */
    omit?: CoproprieteOmit<ExtArgs> | null
    /**
     * The data used to create many Coproprietes.
     */
    data: CoproprieteCreateManyInput | CoproprieteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Copropriete update
   */
  export type CoproprieteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Copropriete
     */
    select?: CoproprieteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Copropriete
     */
    omit?: CoproprieteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoproprieteInclude<ExtArgs> | null
    /**
     * The data needed to update a Copropriete.
     */
    data: XOR<CoproprieteUpdateInput, CoproprieteUncheckedUpdateInput>
    /**
     * Choose, which Copropriete to update.
     */
    where: CoproprieteWhereUniqueInput
  }

  /**
   * Copropriete updateMany
   */
  export type CoproprieteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Coproprietes.
     */
    data: XOR<CoproprieteUpdateManyMutationInput, CoproprieteUncheckedUpdateManyInput>
    /**
     * Filter which Coproprietes to update
     */
    where?: CoproprieteWhereInput
    /**
     * Limit how many Coproprietes to update.
     */
    limit?: number
  }

  /**
   * Copropriete updateManyAndReturn
   */
  export type CoproprieteUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Copropriete
     */
    select?: CoproprieteSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Copropriete
     */
    omit?: CoproprieteOmit<ExtArgs> | null
    /**
     * The data used to update Coproprietes.
     */
    data: XOR<CoproprieteUpdateManyMutationInput, CoproprieteUncheckedUpdateManyInput>
    /**
     * Filter which Coproprietes to update
     */
    where?: CoproprieteWhereInput
    /**
     * Limit how many Coproprietes to update.
     */
    limit?: number
  }

  /**
   * Copropriete upsert
   */
  export type CoproprieteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Copropriete
     */
    select?: CoproprieteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Copropriete
     */
    omit?: CoproprieteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoproprieteInclude<ExtArgs> | null
    /**
     * The filter to search for the Copropriete to update in case it exists.
     */
    where: CoproprieteWhereUniqueInput
    /**
     * In case the Copropriete found by the `where` argument doesn't exist, create a new Copropriete with this data.
     */
    create: XOR<CoproprieteCreateInput, CoproprieteUncheckedCreateInput>
    /**
     * In case the Copropriete was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CoproprieteUpdateInput, CoproprieteUncheckedUpdateInput>
  }

  /**
   * Copropriete delete
   */
  export type CoproprieteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Copropriete
     */
    select?: CoproprieteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Copropriete
     */
    omit?: CoproprieteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoproprieteInclude<ExtArgs> | null
    /**
     * Filter which Copropriete to delete.
     */
    where: CoproprieteWhereUniqueInput
  }

  /**
   * Copropriete deleteMany
   */
  export type CoproprieteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Coproprietes to delete
     */
    where?: CoproprieteWhereInput
    /**
     * Limit how many Coproprietes to delete.
     */
    limit?: number
  }

  /**
   * Copropriete.lots
   */
  export type Copropriete$lotsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lot
     */
    select?: LotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lot
     */
    omit?: LotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LotInclude<ExtArgs> | null
    where?: LotWhereInput
    orderBy?: LotOrderByWithRelationInput | LotOrderByWithRelationInput[]
    cursor?: LotWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LotScalarFieldEnum | LotScalarFieldEnum[]
  }

  /**
   * Copropriete without action
   */
  export type CoproprieteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Copropriete
     */
    select?: CoproprieteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Copropriete
     */
    omit?: CoproprieteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoproprieteInclude<ExtArgs> | null
  }


  /**
   * Model Lot
   */

  export type AggregateLot = {
    _count: LotCountAggregateOutputType | null
    _avg: LotAvgAggregateOutputType | null
    _sum: LotSumAggregateOutputType | null
    _min: LotMinAggregateOutputType | null
    _max: LotMaxAggregateOutputType | null
  }

  export type LotAvgAggregateOutputType = {
    id: number | null
    surface: number | null
    coproprieteId: number | null
  }

  export type LotSumAggregateOutputType = {
    id: number | null
    surface: number | null
    coproprieteId: number | null
  }

  export type LotMinAggregateOutputType = {
    id: number | null
    numero: string | null
    surface: number | null
    coproprieteId: number | null
  }

  export type LotMaxAggregateOutputType = {
    id: number | null
    numero: string | null
    surface: number | null
    coproprieteId: number | null
  }

  export type LotCountAggregateOutputType = {
    id: number
    numero: number
    surface: number
    coproprieteId: number
    _all: number
  }


  export type LotAvgAggregateInputType = {
    id?: true
    surface?: true
    coproprieteId?: true
  }

  export type LotSumAggregateInputType = {
    id?: true
    surface?: true
    coproprieteId?: true
  }

  export type LotMinAggregateInputType = {
    id?: true
    numero?: true
    surface?: true
    coproprieteId?: true
  }

  export type LotMaxAggregateInputType = {
    id?: true
    numero?: true
    surface?: true
    coproprieteId?: true
  }

  export type LotCountAggregateInputType = {
    id?: true
    numero?: true
    surface?: true
    coproprieteId?: true
    _all?: true
  }

  export type LotAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Lot to aggregate.
     */
    where?: LotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lots to fetch.
     */
    orderBy?: LotOrderByWithRelationInput | LotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Lots
    **/
    _count?: true | LotCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LotAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LotSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LotMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LotMaxAggregateInputType
  }

  export type GetLotAggregateType<T extends LotAggregateArgs> = {
        [P in keyof T & keyof AggregateLot]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLot[P]>
      : GetScalarType<T[P], AggregateLot[P]>
  }




  export type LotGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LotWhereInput
    orderBy?: LotOrderByWithAggregationInput | LotOrderByWithAggregationInput[]
    by: LotScalarFieldEnum[] | LotScalarFieldEnum
    having?: LotScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LotCountAggregateInputType | true
    _avg?: LotAvgAggregateInputType
    _sum?: LotSumAggregateInputType
    _min?: LotMinAggregateInputType
    _max?: LotMaxAggregateInputType
  }

  export type LotGroupByOutputType = {
    id: number
    numero: string
    surface: number | null
    coproprieteId: number
    _count: LotCountAggregateOutputType | null
    _avg: LotAvgAggregateOutputType | null
    _sum: LotSumAggregateOutputType | null
    _min: LotMinAggregateOutputType | null
    _max: LotMaxAggregateOutputType | null
  }

  type GetLotGroupByPayload<T extends LotGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LotGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LotGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LotGroupByOutputType[P]>
            : GetScalarType<T[P], LotGroupByOutputType[P]>
        }
      >
    >


  export type LotSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    numero?: boolean
    surface?: boolean
    coproprieteId?: boolean
    appartenances?: boolean | Lot$appartenancesArgs<ExtArgs>
    copropriete?: boolean | CoproprieteDefaultArgs<ExtArgs>
    _count?: boolean | LotCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lot"]>

  export type LotSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    numero?: boolean
    surface?: boolean
    coproprieteId?: boolean
    copropriete?: boolean | CoproprieteDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lot"]>

  export type LotSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    numero?: boolean
    surface?: boolean
    coproprieteId?: boolean
    copropriete?: boolean | CoproprieteDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lot"]>

  export type LotSelectScalar = {
    id?: boolean
    numero?: boolean
    surface?: boolean
    coproprieteId?: boolean
  }

  export type LotOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "numero" | "surface" | "coproprieteId", ExtArgs["result"]["lot"]>
  export type LotInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    appartenances?: boolean | Lot$appartenancesArgs<ExtArgs>
    copropriete?: boolean | CoproprieteDefaultArgs<ExtArgs>
    _count?: boolean | LotCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type LotIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    copropriete?: boolean | CoproprieteDefaultArgs<ExtArgs>
  }
  export type LotIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    copropriete?: boolean | CoproprieteDefaultArgs<ExtArgs>
  }

  export type $LotPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Lot"
    objects: {
      appartenances: Prisma.$AppartenancePayload<ExtArgs>[]
      copropriete: Prisma.$CoproprietePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      numero: string
      surface: number | null
      coproprieteId: number
    }, ExtArgs["result"]["lot"]>
    composites: {}
  }

  type LotGetPayload<S extends boolean | null | undefined | LotDefaultArgs> = $Result.GetResult<Prisma.$LotPayload, S>

  type LotCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LotFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LotCountAggregateInputType | true
    }

  export interface LotDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Lot'], meta: { name: 'Lot' } }
    /**
     * Find zero or one Lot that matches the filter.
     * @param {LotFindUniqueArgs} args - Arguments to find a Lot
     * @example
     * // Get one Lot
     * const lot = await prisma.lot.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LotFindUniqueArgs>(args: SelectSubset<T, LotFindUniqueArgs<ExtArgs>>): Prisma__LotClient<$Result.GetResult<Prisma.$LotPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Lot that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LotFindUniqueOrThrowArgs} args - Arguments to find a Lot
     * @example
     * // Get one Lot
     * const lot = await prisma.lot.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LotFindUniqueOrThrowArgs>(args: SelectSubset<T, LotFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LotClient<$Result.GetResult<Prisma.$LotPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Lot that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LotFindFirstArgs} args - Arguments to find a Lot
     * @example
     * // Get one Lot
     * const lot = await prisma.lot.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LotFindFirstArgs>(args?: SelectSubset<T, LotFindFirstArgs<ExtArgs>>): Prisma__LotClient<$Result.GetResult<Prisma.$LotPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Lot that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LotFindFirstOrThrowArgs} args - Arguments to find a Lot
     * @example
     * // Get one Lot
     * const lot = await prisma.lot.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LotFindFirstOrThrowArgs>(args?: SelectSubset<T, LotFindFirstOrThrowArgs<ExtArgs>>): Prisma__LotClient<$Result.GetResult<Prisma.$LotPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Lots that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LotFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Lots
     * const lots = await prisma.lot.findMany()
     * 
     * // Get first 10 Lots
     * const lots = await prisma.lot.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const lotWithIdOnly = await prisma.lot.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LotFindManyArgs>(args?: SelectSubset<T, LotFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LotPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Lot.
     * @param {LotCreateArgs} args - Arguments to create a Lot.
     * @example
     * // Create one Lot
     * const Lot = await prisma.lot.create({
     *   data: {
     *     // ... data to create a Lot
     *   }
     * })
     * 
     */
    create<T extends LotCreateArgs>(args: SelectSubset<T, LotCreateArgs<ExtArgs>>): Prisma__LotClient<$Result.GetResult<Prisma.$LotPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Lots.
     * @param {LotCreateManyArgs} args - Arguments to create many Lots.
     * @example
     * // Create many Lots
     * const lot = await prisma.lot.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LotCreateManyArgs>(args?: SelectSubset<T, LotCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Lots and returns the data saved in the database.
     * @param {LotCreateManyAndReturnArgs} args - Arguments to create many Lots.
     * @example
     * // Create many Lots
     * const lot = await prisma.lot.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Lots and only return the `id`
     * const lotWithIdOnly = await prisma.lot.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LotCreateManyAndReturnArgs>(args?: SelectSubset<T, LotCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LotPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Lot.
     * @param {LotDeleteArgs} args - Arguments to delete one Lot.
     * @example
     * // Delete one Lot
     * const Lot = await prisma.lot.delete({
     *   where: {
     *     // ... filter to delete one Lot
     *   }
     * })
     * 
     */
    delete<T extends LotDeleteArgs>(args: SelectSubset<T, LotDeleteArgs<ExtArgs>>): Prisma__LotClient<$Result.GetResult<Prisma.$LotPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Lot.
     * @param {LotUpdateArgs} args - Arguments to update one Lot.
     * @example
     * // Update one Lot
     * const lot = await prisma.lot.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LotUpdateArgs>(args: SelectSubset<T, LotUpdateArgs<ExtArgs>>): Prisma__LotClient<$Result.GetResult<Prisma.$LotPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Lots.
     * @param {LotDeleteManyArgs} args - Arguments to filter Lots to delete.
     * @example
     * // Delete a few Lots
     * const { count } = await prisma.lot.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LotDeleteManyArgs>(args?: SelectSubset<T, LotDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Lots.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LotUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Lots
     * const lot = await prisma.lot.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LotUpdateManyArgs>(args: SelectSubset<T, LotUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Lots and returns the data updated in the database.
     * @param {LotUpdateManyAndReturnArgs} args - Arguments to update many Lots.
     * @example
     * // Update many Lots
     * const lot = await prisma.lot.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Lots and only return the `id`
     * const lotWithIdOnly = await prisma.lot.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LotUpdateManyAndReturnArgs>(args: SelectSubset<T, LotUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LotPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Lot.
     * @param {LotUpsertArgs} args - Arguments to update or create a Lot.
     * @example
     * // Update or create a Lot
     * const lot = await prisma.lot.upsert({
     *   create: {
     *     // ... data to create a Lot
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Lot we want to update
     *   }
     * })
     */
    upsert<T extends LotUpsertArgs>(args: SelectSubset<T, LotUpsertArgs<ExtArgs>>): Prisma__LotClient<$Result.GetResult<Prisma.$LotPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Lots.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LotCountArgs} args - Arguments to filter Lots to count.
     * @example
     * // Count the number of Lots
     * const count = await prisma.lot.count({
     *   where: {
     *     // ... the filter for the Lots we want to count
     *   }
     * })
    **/
    count<T extends LotCountArgs>(
      args?: Subset<T, LotCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LotCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Lot.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LotAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LotAggregateArgs>(args: Subset<T, LotAggregateArgs>): Prisma.PrismaPromise<GetLotAggregateType<T>>

    /**
     * Group by Lot.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LotGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LotGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LotGroupByArgs['orderBy'] }
        : { orderBy?: LotGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LotGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLotGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Lot model
   */
  readonly fields: LotFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Lot.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LotClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    appartenances<T extends Lot$appartenancesArgs<ExtArgs> = {}>(args?: Subset<T, Lot$appartenancesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppartenancePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    copropriete<T extends CoproprieteDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CoproprieteDefaultArgs<ExtArgs>>): Prisma__CoproprieteClient<$Result.GetResult<Prisma.$CoproprietePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Lot model
   */
  interface LotFieldRefs {
    readonly id: FieldRef<"Lot", 'Int'>
    readonly numero: FieldRef<"Lot", 'String'>
    readonly surface: FieldRef<"Lot", 'Float'>
    readonly coproprieteId: FieldRef<"Lot", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Lot findUnique
   */
  export type LotFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lot
     */
    select?: LotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lot
     */
    omit?: LotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LotInclude<ExtArgs> | null
    /**
     * Filter, which Lot to fetch.
     */
    where: LotWhereUniqueInput
  }

  /**
   * Lot findUniqueOrThrow
   */
  export type LotFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lot
     */
    select?: LotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lot
     */
    omit?: LotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LotInclude<ExtArgs> | null
    /**
     * Filter, which Lot to fetch.
     */
    where: LotWhereUniqueInput
  }

  /**
   * Lot findFirst
   */
  export type LotFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lot
     */
    select?: LotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lot
     */
    omit?: LotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LotInclude<ExtArgs> | null
    /**
     * Filter, which Lot to fetch.
     */
    where?: LotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lots to fetch.
     */
    orderBy?: LotOrderByWithRelationInput | LotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Lots.
     */
    cursor?: LotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Lots.
     */
    distinct?: LotScalarFieldEnum | LotScalarFieldEnum[]
  }

  /**
   * Lot findFirstOrThrow
   */
  export type LotFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lot
     */
    select?: LotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lot
     */
    omit?: LotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LotInclude<ExtArgs> | null
    /**
     * Filter, which Lot to fetch.
     */
    where?: LotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lots to fetch.
     */
    orderBy?: LotOrderByWithRelationInput | LotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Lots.
     */
    cursor?: LotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Lots.
     */
    distinct?: LotScalarFieldEnum | LotScalarFieldEnum[]
  }

  /**
   * Lot findMany
   */
  export type LotFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lot
     */
    select?: LotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lot
     */
    omit?: LotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LotInclude<ExtArgs> | null
    /**
     * Filter, which Lots to fetch.
     */
    where?: LotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lots to fetch.
     */
    orderBy?: LotOrderByWithRelationInput | LotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Lots.
     */
    cursor?: LotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lots.
     */
    skip?: number
    distinct?: LotScalarFieldEnum | LotScalarFieldEnum[]
  }

  /**
   * Lot create
   */
  export type LotCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lot
     */
    select?: LotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lot
     */
    omit?: LotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LotInclude<ExtArgs> | null
    /**
     * The data needed to create a Lot.
     */
    data: XOR<LotCreateInput, LotUncheckedCreateInput>
  }

  /**
   * Lot createMany
   */
  export type LotCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Lots.
     */
    data: LotCreateManyInput | LotCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Lot createManyAndReturn
   */
  export type LotCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lot
     */
    select?: LotSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Lot
     */
    omit?: LotOmit<ExtArgs> | null
    /**
     * The data used to create many Lots.
     */
    data: LotCreateManyInput | LotCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LotIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Lot update
   */
  export type LotUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lot
     */
    select?: LotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lot
     */
    omit?: LotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LotInclude<ExtArgs> | null
    /**
     * The data needed to update a Lot.
     */
    data: XOR<LotUpdateInput, LotUncheckedUpdateInput>
    /**
     * Choose, which Lot to update.
     */
    where: LotWhereUniqueInput
  }

  /**
   * Lot updateMany
   */
  export type LotUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Lots.
     */
    data: XOR<LotUpdateManyMutationInput, LotUncheckedUpdateManyInput>
    /**
     * Filter which Lots to update
     */
    where?: LotWhereInput
    /**
     * Limit how many Lots to update.
     */
    limit?: number
  }

  /**
   * Lot updateManyAndReturn
   */
  export type LotUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lot
     */
    select?: LotSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Lot
     */
    omit?: LotOmit<ExtArgs> | null
    /**
     * The data used to update Lots.
     */
    data: XOR<LotUpdateManyMutationInput, LotUncheckedUpdateManyInput>
    /**
     * Filter which Lots to update
     */
    where?: LotWhereInput
    /**
     * Limit how many Lots to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LotIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Lot upsert
   */
  export type LotUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lot
     */
    select?: LotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lot
     */
    omit?: LotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LotInclude<ExtArgs> | null
    /**
     * The filter to search for the Lot to update in case it exists.
     */
    where: LotWhereUniqueInput
    /**
     * In case the Lot found by the `where` argument doesn't exist, create a new Lot with this data.
     */
    create: XOR<LotCreateInput, LotUncheckedCreateInput>
    /**
     * In case the Lot was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LotUpdateInput, LotUncheckedUpdateInput>
  }

  /**
   * Lot delete
   */
  export type LotDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lot
     */
    select?: LotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lot
     */
    omit?: LotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LotInclude<ExtArgs> | null
    /**
     * Filter which Lot to delete.
     */
    where: LotWhereUniqueInput
  }

  /**
   * Lot deleteMany
   */
  export type LotDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Lots to delete
     */
    where?: LotWhereInput
    /**
     * Limit how many Lots to delete.
     */
    limit?: number
  }

  /**
   * Lot.appartenances
   */
  export type Lot$appartenancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appartenance
     */
    select?: AppartenanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appartenance
     */
    omit?: AppartenanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppartenanceInclude<ExtArgs> | null
    where?: AppartenanceWhereInput
    orderBy?: AppartenanceOrderByWithRelationInput | AppartenanceOrderByWithRelationInput[]
    cursor?: AppartenanceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AppartenanceScalarFieldEnum | AppartenanceScalarFieldEnum[]
  }

  /**
   * Lot without action
   */
  export type LotDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lot
     */
    select?: LotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lot
     */
    omit?: LotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LotInclude<ExtArgs> | null
  }


  /**
   * Model Coproprietaire
   */

  export type AggregateCoproprietaire = {
    _count: CoproprietaireCountAggregateOutputType | null
    _avg: CoproprietaireAvgAggregateOutputType | null
    _sum: CoproprietaireSumAggregateOutputType | null
    _min: CoproprietaireMinAggregateOutputType | null
    _max: CoproprietaireMaxAggregateOutputType | null
  }

  export type CoproprietaireAvgAggregateOutputType = {
    id: number | null
  }

  export type CoproprietaireSumAggregateOutputType = {
    id: number | null
  }

  export type CoproprietaireMinAggregateOutputType = {
    id: number | null
    nom: string | null
    email: string | null
    telephone: string | null
  }

  export type CoproprietaireMaxAggregateOutputType = {
    id: number | null
    nom: string | null
    email: string | null
    telephone: string | null
  }

  export type CoproprietaireCountAggregateOutputType = {
    id: number
    nom: number
    email: number
    telephone: number
    _all: number
  }


  export type CoproprietaireAvgAggregateInputType = {
    id?: true
  }

  export type CoproprietaireSumAggregateInputType = {
    id?: true
  }

  export type CoproprietaireMinAggregateInputType = {
    id?: true
    nom?: true
    email?: true
    telephone?: true
  }

  export type CoproprietaireMaxAggregateInputType = {
    id?: true
    nom?: true
    email?: true
    telephone?: true
  }

  export type CoproprietaireCountAggregateInputType = {
    id?: true
    nom?: true
    email?: true
    telephone?: true
    _all?: true
  }

  export type CoproprietaireAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Coproprietaire to aggregate.
     */
    where?: CoproprietaireWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Coproprietaires to fetch.
     */
    orderBy?: CoproprietaireOrderByWithRelationInput | CoproprietaireOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CoproprietaireWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Coproprietaires from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Coproprietaires.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Coproprietaires
    **/
    _count?: true | CoproprietaireCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CoproprietaireAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CoproprietaireSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CoproprietaireMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CoproprietaireMaxAggregateInputType
  }

  export type GetCoproprietaireAggregateType<T extends CoproprietaireAggregateArgs> = {
        [P in keyof T & keyof AggregateCoproprietaire]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCoproprietaire[P]>
      : GetScalarType<T[P], AggregateCoproprietaire[P]>
  }




  export type CoproprietaireGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CoproprietaireWhereInput
    orderBy?: CoproprietaireOrderByWithAggregationInput | CoproprietaireOrderByWithAggregationInput[]
    by: CoproprietaireScalarFieldEnum[] | CoproprietaireScalarFieldEnum
    having?: CoproprietaireScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CoproprietaireCountAggregateInputType | true
    _avg?: CoproprietaireAvgAggregateInputType
    _sum?: CoproprietaireSumAggregateInputType
    _min?: CoproprietaireMinAggregateInputType
    _max?: CoproprietaireMaxAggregateInputType
  }

  export type CoproprietaireGroupByOutputType = {
    id: number
    nom: string
    email: string | null
    telephone: string | null
    _count: CoproprietaireCountAggregateOutputType | null
    _avg: CoproprietaireAvgAggregateOutputType | null
    _sum: CoproprietaireSumAggregateOutputType | null
    _min: CoproprietaireMinAggregateOutputType | null
    _max: CoproprietaireMaxAggregateOutputType | null
  }

  type GetCoproprietaireGroupByPayload<T extends CoproprietaireGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CoproprietaireGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CoproprietaireGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CoproprietaireGroupByOutputType[P]>
            : GetScalarType<T[P], CoproprietaireGroupByOutputType[P]>
        }
      >
    >


  export type CoproprietaireSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
    email?: boolean
    telephone?: boolean
    appartenances?: boolean | Coproprietaire$appartenancesArgs<ExtArgs>
    _count?: boolean | CoproprietaireCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["coproprietaire"]>

  export type CoproprietaireSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
    email?: boolean
    telephone?: boolean
  }, ExtArgs["result"]["coproprietaire"]>

  export type CoproprietaireSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
    email?: boolean
    telephone?: boolean
  }, ExtArgs["result"]["coproprietaire"]>

  export type CoproprietaireSelectScalar = {
    id?: boolean
    nom?: boolean
    email?: boolean
    telephone?: boolean
  }

  export type CoproprietaireOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nom" | "email" | "telephone", ExtArgs["result"]["coproprietaire"]>
  export type CoproprietaireInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    appartenances?: boolean | Coproprietaire$appartenancesArgs<ExtArgs>
    _count?: boolean | CoproprietaireCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CoproprietaireIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type CoproprietaireIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CoproprietairePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Coproprietaire"
    objects: {
      appartenances: Prisma.$AppartenancePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nom: string
      email: string | null
      telephone: string | null
    }, ExtArgs["result"]["coproprietaire"]>
    composites: {}
  }

  type CoproprietaireGetPayload<S extends boolean | null | undefined | CoproprietaireDefaultArgs> = $Result.GetResult<Prisma.$CoproprietairePayload, S>

  type CoproprietaireCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CoproprietaireFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CoproprietaireCountAggregateInputType | true
    }

  export interface CoproprietaireDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Coproprietaire'], meta: { name: 'Coproprietaire' } }
    /**
     * Find zero or one Coproprietaire that matches the filter.
     * @param {CoproprietaireFindUniqueArgs} args - Arguments to find a Coproprietaire
     * @example
     * // Get one Coproprietaire
     * const coproprietaire = await prisma.coproprietaire.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CoproprietaireFindUniqueArgs>(args: SelectSubset<T, CoproprietaireFindUniqueArgs<ExtArgs>>): Prisma__CoproprietaireClient<$Result.GetResult<Prisma.$CoproprietairePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Coproprietaire that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CoproprietaireFindUniqueOrThrowArgs} args - Arguments to find a Coproprietaire
     * @example
     * // Get one Coproprietaire
     * const coproprietaire = await prisma.coproprietaire.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CoproprietaireFindUniqueOrThrowArgs>(args: SelectSubset<T, CoproprietaireFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CoproprietaireClient<$Result.GetResult<Prisma.$CoproprietairePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Coproprietaire that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoproprietaireFindFirstArgs} args - Arguments to find a Coproprietaire
     * @example
     * // Get one Coproprietaire
     * const coproprietaire = await prisma.coproprietaire.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CoproprietaireFindFirstArgs>(args?: SelectSubset<T, CoproprietaireFindFirstArgs<ExtArgs>>): Prisma__CoproprietaireClient<$Result.GetResult<Prisma.$CoproprietairePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Coproprietaire that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoproprietaireFindFirstOrThrowArgs} args - Arguments to find a Coproprietaire
     * @example
     * // Get one Coproprietaire
     * const coproprietaire = await prisma.coproprietaire.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CoproprietaireFindFirstOrThrowArgs>(args?: SelectSubset<T, CoproprietaireFindFirstOrThrowArgs<ExtArgs>>): Prisma__CoproprietaireClient<$Result.GetResult<Prisma.$CoproprietairePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Coproprietaires that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoproprietaireFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Coproprietaires
     * const coproprietaires = await prisma.coproprietaire.findMany()
     * 
     * // Get first 10 Coproprietaires
     * const coproprietaires = await prisma.coproprietaire.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const coproprietaireWithIdOnly = await prisma.coproprietaire.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CoproprietaireFindManyArgs>(args?: SelectSubset<T, CoproprietaireFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoproprietairePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Coproprietaire.
     * @param {CoproprietaireCreateArgs} args - Arguments to create a Coproprietaire.
     * @example
     * // Create one Coproprietaire
     * const Coproprietaire = await prisma.coproprietaire.create({
     *   data: {
     *     // ... data to create a Coproprietaire
     *   }
     * })
     * 
     */
    create<T extends CoproprietaireCreateArgs>(args: SelectSubset<T, CoproprietaireCreateArgs<ExtArgs>>): Prisma__CoproprietaireClient<$Result.GetResult<Prisma.$CoproprietairePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Coproprietaires.
     * @param {CoproprietaireCreateManyArgs} args - Arguments to create many Coproprietaires.
     * @example
     * // Create many Coproprietaires
     * const coproprietaire = await prisma.coproprietaire.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CoproprietaireCreateManyArgs>(args?: SelectSubset<T, CoproprietaireCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Coproprietaires and returns the data saved in the database.
     * @param {CoproprietaireCreateManyAndReturnArgs} args - Arguments to create many Coproprietaires.
     * @example
     * // Create many Coproprietaires
     * const coproprietaire = await prisma.coproprietaire.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Coproprietaires and only return the `id`
     * const coproprietaireWithIdOnly = await prisma.coproprietaire.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CoproprietaireCreateManyAndReturnArgs>(args?: SelectSubset<T, CoproprietaireCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoproprietairePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Coproprietaire.
     * @param {CoproprietaireDeleteArgs} args - Arguments to delete one Coproprietaire.
     * @example
     * // Delete one Coproprietaire
     * const Coproprietaire = await prisma.coproprietaire.delete({
     *   where: {
     *     // ... filter to delete one Coproprietaire
     *   }
     * })
     * 
     */
    delete<T extends CoproprietaireDeleteArgs>(args: SelectSubset<T, CoproprietaireDeleteArgs<ExtArgs>>): Prisma__CoproprietaireClient<$Result.GetResult<Prisma.$CoproprietairePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Coproprietaire.
     * @param {CoproprietaireUpdateArgs} args - Arguments to update one Coproprietaire.
     * @example
     * // Update one Coproprietaire
     * const coproprietaire = await prisma.coproprietaire.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CoproprietaireUpdateArgs>(args: SelectSubset<T, CoproprietaireUpdateArgs<ExtArgs>>): Prisma__CoproprietaireClient<$Result.GetResult<Prisma.$CoproprietairePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Coproprietaires.
     * @param {CoproprietaireDeleteManyArgs} args - Arguments to filter Coproprietaires to delete.
     * @example
     * // Delete a few Coproprietaires
     * const { count } = await prisma.coproprietaire.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CoproprietaireDeleteManyArgs>(args?: SelectSubset<T, CoproprietaireDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Coproprietaires.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoproprietaireUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Coproprietaires
     * const coproprietaire = await prisma.coproprietaire.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CoproprietaireUpdateManyArgs>(args: SelectSubset<T, CoproprietaireUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Coproprietaires and returns the data updated in the database.
     * @param {CoproprietaireUpdateManyAndReturnArgs} args - Arguments to update many Coproprietaires.
     * @example
     * // Update many Coproprietaires
     * const coproprietaire = await prisma.coproprietaire.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Coproprietaires and only return the `id`
     * const coproprietaireWithIdOnly = await prisma.coproprietaire.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CoproprietaireUpdateManyAndReturnArgs>(args: SelectSubset<T, CoproprietaireUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoproprietairePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Coproprietaire.
     * @param {CoproprietaireUpsertArgs} args - Arguments to update or create a Coproprietaire.
     * @example
     * // Update or create a Coproprietaire
     * const coproprietaire = await prisma.coproprietaire.upsert({
     *   create: {
     *     // ... data to create a Coproprietaire
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Coproprietaire we want to update
     *   }
     * })
     */
    upsert<T extends CoproprietaireUpsertArgs>(args: SelectSubset<T, CoproprietaireUpsertArgs<ExtArgs>>): Prisma__CoproprietaireClient<$Result.GetResult<Prisma.$CoproprietairePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Coproprietaires.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoproprietaireCountArgs} args - Arguments to filter Coproprietaires to count.
     * @example
     * // Count the number of Coproprietaires
     * const count = await prisma.coproprietaire.count({
     *   where: {
     *     // ... the filter for the Coproprietaires we want to count
     *   }
     * })
    **/
    count<T extends CoproprietaireCountArgs>(
      args?: Subset<T, CoproprietaireCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CoproprietaireCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Coproprietaire.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoproprietaireAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CoproprietaireAggregateArgs>(args: Subset<T, CoproprietaireAggregateArgs>): Prisma.PrismaPromise<GetCoproprietaireAggregateType<T>>

    /**
     * Group by Coproprietaire.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoproprietaireGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CoproprietaireGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CoproprietaireGroupByArgs['orderBy'] }
        : { orderBy?: CoproprietaireGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CoproprietaireGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCoproprietaireGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Coproprietaire model
   */
  readonly fields: CoproprietaireFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Coproprietaire.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CoproprietaireClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    appartenances<T extends Coproprietaire$appartenancesArgs<ExtArgs> = {}>(args?: Subset<T, Coproprietaire$appartenancesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppartenancePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Coproprietaire model
   */
  interface CoproprietaireFieldRefs {
    readonly id: FieldRef<"Coproprietaire", 'Int'>
    readonly nom: FieldRef<"Coproprietaire", 'String'>
    readonly email: FieldRef<"Coproprietaire", 'String'>
    readonly telephone: FieldRef<"Coproprietaire", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Coproprietaire findUnique
   */
  export type CoproprietaireFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coproprietaire
     */
    select?: CoproprietaireSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Coproprietaire
     */
    omit?: CoproprietaireOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoproprietaireInclude<ExtArgs> | null
    /**
     * Filter, which Coproprietaire to fetch.
     */
    where: CoproprietaireWhereUniqueInput
  }

  /**
   * Coproprietaire findUniqueOrThrow
   */
  export type CoproprietaireFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coproprietaire
     */
    select?: CoproprietaireSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Coproprietaire
     */
    omit?: CoproprietaireOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoproprietaireInclude<ExtArgs> | null
    /**
     * Filter, which Coproprietaire to fetch.
     */
    where: CoproprietaireWhereUniqueInput
  }

  /**
   * Coproprietaire findFirst
   */
  export type CoproprietaireFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coproprietaire
     */
    select?: CoproprietaireSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Coproprietaire
     */
    omit?: CoproprietaireOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoproprietaireInclude<ExtArgs> | null
    /**
     * Filter, which Coproprietaire to fetch.
     */
    where?: CoproprietaireWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Coproprietaires to fetch.
     */
    orderBy?: CoproprietaireOrderByWithRelationInput | CoproprietaireOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Coproprietaires.
     */
    cursor?: CoproprietaireWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Coproprietaires from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Coproprietaires.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Coproprietaires.
     */
    distinct?: CoproprietaireScalarFieldEnum | CoproprietaireScalarFieldEnum[]
  }

  /**
   * Coproprietaire findFirstOrThrow
   */
  export type CoproprietaireFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coproprietaire
     */
    select?: CoproprietaireSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Coproprietaire
     */
    omit?: CoproprietaireOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoproprietaireInclude<ExtArgs> | null
    /**
     * Filter, which Coproprietaire to fetch.
     */
    where?: CoproprietaireWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Coproprietaires to fetch.
     */
    orderBy?: CoproprietaireOrderByWithRelationInput | CoproprietaireOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Coproprietaires.
     */
    cursor?: CoproprietaireWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Coproprietaires from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Coproprietaires.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Coproprietaires.
     */
    distinct?: CoproprietaireScalarFieldEnum | CoproprietaireScalarFieldEnum[]
  }

  /**
   * Coproprietaire findMany
   */
  export type CoproprietaireFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coproprietaire
     */
    select?: CoproprietaireSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Coproprietaire
     */
    omit?: CoproprietaireOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoproprietaireInclude<ExtArgs> | null
    /**
     * Filter, which Coproprietaires to fetch.
     */
    where?: CoproprietaireWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Coproprietaires to fetch.
     */
    orderBy?: CoproprietaireOrderByWithRelationInput | CoproprietaireOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Coproprietaires.
     */
    cursor?: CoproprietaireWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Coproprietaires from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Coproprietaires.
     */
    skip?: number
    distinct?: CoproprietaireScalarFieldEnum | CoproprietaireScalarFieldEnum[]
  }

  /**
   * Coproprietaire create
   */
  export type CoproprietaireCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coproprietaire
     */
    select?: CoproprietaireSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Coproprietaire
     */
    omit?: CoproprietaireOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoproprietaireInclude<ExtArgs> | null
    /**
     * The data needed to create a Coproprietaire.
     */
    data: XOR<CoproprietaireCreateInput, CoproprietaireUncheckedCreateInput>
  }

  /**
   * Coproprietaire createMany
   */
  export type CoproprietaireCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Coproprietaires.
     */
    data: CoproprietaireCreateManyInput | CoproprietaireCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Coproprietaire createManyAndReturn
   */
  export type CoproprietaireCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coproprietaire
     */
    select?: CoproprietaireSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Coproprietaire
     */
    omit?: CoproprietaireOmit<ExtArgs> | null
    /**
     * The data used to create many Coproprietaires.
     */
    data: CoproprietaireCreateManyInput | CoproprietaireCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Coproprietaire update
   */
  export type CoproprietaireUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coproprietaire
     */
    select?: CoproprietaireSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Coproprietaire
     */
    omit?: CoproprietaireOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoproprietaireInclude<ExtArgs> | null
    /**
     * The data needed to update a Coproprietaire.
     */
    data: XOR<CoproprietaireUpdateInput, CoproprietaireUncheckedUpdateInput>
    /**
     * Choose, which Coproprietaire to update.
     */
    where: CoproprietaireWhereUniqueInput
  }

  /**
   * Coproprietaire updateMany
   */
  export type CoproprietaireUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Coproprietaires.
     */
    data: XOR<CoproprietaireUpdateManyMutationInput, CoproprietaireUncheckedUpdateManyInput>
    /**
     * Filter which Coproprietaires to update
     */
    where?: CoproprietaireWhereInput
    /**
     * Limit how many Coproprietaires to update.
     */
    limit?: number
  }

  /**
   * Coproprietaire updateManyAndReturn
   */
  export type CoproprietaireUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coproprietaire
     */
    select?: CoproprietaireSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Coproprietaire
     */
    omit?: CoproprietaireOmit<ExtArgs> | null
    /**
     * The data used to update Coproprietaires.
     */
    data: XOR<CoproprietaireUpdateManyMutationInput, CoproprietaireUncheckedUpdateManyInput>
    /**
     * Filter which Coproprietaires to update
     */
    where?: CoproprietaireWhereInput
    /**
     * Limit how many Coproprietaires to update.
     */
    limit?: number
  }

  /**
   * Coproprietaire upsert
   */
  export type CoproprietaireUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coproprietaire
     */
    select?: CoproprietaireSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Coproprietaire
     */
    omit?: CoproprietaireOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoproprietaireInclude<ExtArgs> | null
    /**
     * The filter to search for the Coproprietaire to update in case it exists.
     */
    where: CoproprietaireWhereUniqueInput
    /**
     * In case the Coproprietaire found by the `where` argument doesn't exist, create a new Coproprietaire with this data.
     */
    create: XOR<CoproprietaireCreateInput, CoproprietaireUncheckedCreateInput>
    /**
     * In case the Coproprietaire was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CoproprietaireUpdateInput, CoproprietaireUncheckedUpdateInput>
  }

  /**
   * Coproprietaire delete
   */
  export type CoproprietaireDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coproprietaire
     */
    select?: CoproprietaireSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Coproprietaire
     */
    omit?: CoproprietaireOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoproprietaireInclude<ExtArgs> | null
    /**
     * Filter which Coproprietaire to delete.
     */
    where: CoproprietaireWhereUniqueInput
  }

  /**
   * Coproprietaire deleteMany
   */
  export type CoproprietaireDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Coproprietaires to delete
     */
    where?: CoproprietaireWhereInput
    /**
     * Limit how many Coproprietaires to delete.
     */
    limit?: number
  }

  /**
   * Coproprietaire.appartenances
   */
  export type Coproprietaire$appartenancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appartenance
     */
    select?: AppartenanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appartenance
     */
    omit?: AppartenanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppartenanceInclude<ExtArgs> | null
    where?: AppartenanceWhereInput
    orderBy?: AppartenanceOrderByWithRelationInput | AppartenanceOrderByWithRelationInput[]
    cursor?: AppartenanceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AppartenanceScalarFieldEnum | AppartenanceScalarFieldEnum[]
  }

  /**
   * Coproprietaire without action
   */
  export type CoproprietaireDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coproprietaire
     */
    select?: CoproprietaireSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Coproprietaire
     */
    omit?: CoproprietaireOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoproprietaireInclude<ExtArgs> | null
  }


  /**
   * Model Appartenance
   */

  export type AggregateAppartenance = {
    _count: AppartenanceCountAggregateOutputType | null
    _avg: AppartenanceAvgAggregateOutputType | null
    _sum: AppartenanceSumAggregateOutputType | null
    _min: AppartenanceMinAggregateOutputType | null
    _max: AppartenanceMaxAggregateOutputType | null
  }

  export type AppartenanceAvgAggregateOutputType = {
    id: number | null
    lotId: number | null
    coproprietaireId: number | null
    pourcentage: number | null
  }

  export type AppartenanceSumAggregateOutputType = {
    id: number | null
    lotId: number | null
    coproprietaireId: number | null
    pourcentage: number | null
  }

  export type AppartenanceMinAggregateOutputType = {
    id: number | null
    lotId: number | null
    coproprietaireId: number | null
    pourcentage: number | null
  }

  export type AppartenanceMaxAggregateOutputType = {
    id: number | null
    lotId: number | null
    coproprietaireId: number | null
    pourcentage: number | null
  }

  export type AppartenanceCountAggregateOutputType = {
    id: number
    lotId: number
    coproprietaireId: number
    pourcentage: number
    _all: number
  }


  export type AppartenanceAvgAggregateInputType = {
    id?: true
    lotId?: true
    coproprietaireId?: true
    pourcentage?: true
  }

  export type AppartenanceSumAggregateInputType = {
    id?: true
    lotId?: true
    coproprietaireId?: true
    pourcentage?: true
  }

  export type AppartenanceMinAggregateInputType = {
    id?: true
    lotId?: true
    coproprietaireId?: true
    pourcentage?: true
  }

  export type AppartenanceMaxAggregateInputType = {
    id?: true
    lotId?: true
    coproprietaireId?: true
    pourcentage?: true
  }

  export type AppartenanceCountAggregateInputType = {
    id?: true
    lotId?: true
    coproprietaireId?: true
    pourcentage?: true
    _all?: true
  }

  export type AppartenanceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Appartenance to aggregate.
     */
    where?: AppartenanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appartenances to fetch.
     */
    orderBy?: AppartenanceOrderByWithRelationInput | AppartenanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AppartenanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appartenances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appartenances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Appartenances
    **/
    _count?: true | AppartenanceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AppartenanceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AppartenanceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AppartenanceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AppartenanceMaxAggregateInputType
  }

  export type GetAppartenanceAggregateType<T extends AppartenanceAggregateArgs> = {
        [P in keyof T & keyof AggregateAppartenance]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAppartenance[P]>
      : GetScalarType<T[P], AggregateAppartenance[P]>
  }




  export type AppartenanceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppartenanceWhereInput
    orderBy?: AppartenanceOrderByWithAggregationInput | AppartenanceOrderByWithAggregationInput[]
    by: AppartenanceScalarFieldEnum[] | AppartenanceScalarFieldEnum
    having?: AppartenanceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AppartenanceCountAggregateInputType | true
    _avg?: AppartenanceAvgAggregateInputType
    _sum?: AppartenanceSumAggregateInputType
    _min?: AppartenanceMinAggregateInputType
    _max?: AppartenanceMaxAggregateInputType
  }

  export type AppartenanceGroupByOutputType = {
    id: number
    lotId: number
    coproprietaireId: number
    pourcentage: number
    _count: AppartenanceCountAggregateOutputType | null
    _avg: AppartenanceAvgAggregateOutputType | null
    _sum: AppartenanceSumAggregateOutputType | null
    _min: AppartenanceMinAggregateOutputType | null
    _max: AppartenanceMaxAggregateOutputType | null
  }

  type GetAppartenanceGroupByPayload<T extends AppartenanceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AppartenanceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AppartenanceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AppartenanceGroupByOutputType[P]>
            : GetScalarType<T[P], AppartenanceGroupByOutputType[P]>
        }
      >
    >


  export type AppartenanceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    lotId?: boolean
    coproprietaireId?: boolean
    pourcentage?: boolean
    coproprietaire?: boolean | CoproprietaireDefaultArgs<ExtArgs>
    lot?: boolean | LotDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["appartenance"]>

  export type AppartenanceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    lotId?: boolean
    coproprietaireId?: boolean
    pourcentage?: boolean
    coproprietaire?: boolean | CoproprietaireDefaultArgs<ExtArgs>
    lot?: boolean | LotDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["appartenance"]>

  export type AppartenanceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    lotId?: boolean
    coproprietaireId?: boolean
    pourcentage?: boolean
    coproprietaire?: boolean | CoproprietaireDefaultArgs<ExtArgs>
    lot?: boolean | LotDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["appartenance"]>

  export type AppartenanceSelectScalar = {
    id?: boolean
    lotId?: boolean
    coproprietaireId?: boolean
    pourcentage?: boolean
  }

  export type AppartenanceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "lotId" | "coproprietaireId" | "pourcentage", ExtArgs["result"]["appartenance"]>
  export type AppartenanceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    coproprietaire?: boolean | CoproprietaireDefaultArgs<ExtArgs>
    lot?: boolean | LotDefaultArgs<ExtArgs>
  }
  export type AppartenanceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    coproprietaire?: boolean | CoproprietaireDefaultArgs<ExtArgs>
    lot?: boolean | LotDefaultArgs<ExtArgs>
  }
  export type AppartenanceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    coproprietaire?: boolean | CoproprietaireDefaultArgs<ExtArgs>
    lot?: boolean | LotDefaultArgs<ExtArgs>
  }

  export type $AppartenancePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Appartenance"
    objects: {
      coproprietaire: Prisma.$CoproprietairePayload<ExtArgs>
      lot: Prisma.$LotPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      lotId: number
      coproprietaireId: number
      pourcentage: number
    }, ExtArgs["result"]["appartenance"]>
    composites: {}
  }

  type AppartenanceGetPayload<S extends boolean | null | undefined | AppartenanceDefaultArgs> = $Result.GetResult<Prisma.$AppartenancePayload, S>

  type AppartenanceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AppartenanceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AppartenanceCountAggregateInputType | true
    }

  export interface AppartenanceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Appartenance'], meta: { name: 'Appartenance' } }
    /**
     * Find zero or one Appartenance that matches the filter.
     * @param {AppartenanceFindUniqueArgs} args - Arguments to find a Appartenance
     * @example
     * // Get one Appartenance
     * const appartenance = await prisma.appartenance.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AppartenanceFindUniqueArgs>(args: SelectSubset<T, AppartenanceFindUniqueArgs<ExtArgs>>): Prisma__AppartenanceClient<$Result.GetResult<Prisma.$AppartenancePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Appartenance that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AppartenanceFindUniqueOrThrowArgs} args - Arguments to find a Appartenance
     * @example
     * // Get one Appartenance
     * const appartenance = await prisma.appartenance.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AppartenanceFindUniqueOrThrowArgs>(args: SelectSubset<T, AppartenanceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AppartenanceClient<$Result.GetResult<Prisma.$AppartenancePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Appartenance that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppartenanceFindFirstArgs} args - Arguments to find a Appartenance
     * @example
     * // Get one Appartenance
     * const appartenance = await prisma.appartenance.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AppartenanceFindFirstArgs>(args?: SelectSubset<T, AppartenanceFindFirstArgs<ExtArgs>>): Prisma__AppartenanceClient<$Result.GetResult<Prisma.$AppartenancePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Appartenance that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppartenanceFindFirstOrThrowArgs} args - Arguments to find a Appartenance
     * @example
     * // Get one Appartenance
     * const appartenance = await prisma.appartenance.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AppartenanceFindFirstOrThrowArgs>(args?: SelectSubset<T, AppartenanceFindFirstOrThrowArgs<ExtArgs>>): Prisma__AppartenanceClient<$Result.GetResult<Prisma.$AppartenancePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Appartenances that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppartenanceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Appartenances
     * const appartenances = await prisma.appartenance.findMany()
     * 
     * // Get first 10 Appartenances
     * const appartenances = await prisma.appartenance.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const appartenanceWithIdOnly = await prisma.appartenance.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AppartenanceFindManyArgs>(args?: SelectSubset<T, AppartenanceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppartenancePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Appartenance.
     * @param {AppartenanceCreateArgs} args - Arguments to create a Appartenance.
     * @example
     * // Create one Appartenance
     * const Appartenance = await prisma.appartenance.create({
     *   data: {
     *     // ... data to create a Appartenance
     *   }
     * })
     * 
     */
    create<T extends AppartenanceCreateArgs>(args: SelectSubset<T, AppartenanceCreateArgs<ExtArgs>>): Prisma__AppartenanceClient<$Result.GetResult<Prisma.$AppartenancePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Appartenances.
     * @param {AppartenanceCreateManyArgs} args - Arguments to create many Appartenances.
     * @example
     * // Create many Appartenances
     * const appartenance = await prisma.appartenance.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AppartenanceCreateManyArgs>(args?: SelectSubset<T, AppartenanceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Appartenances and returns the data saved in the database.
     * @param {AppartenanceCreateManyAndReturnArgs} args - Arguments to create many Appartenances.
     * @example
     * // Create many Appartenances
     * const appartenance = await prisma.appartenance.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Appartenances and only return the `id`
     * const appartenanceWithIdOnly = await prisma.appartenance.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AppartenanceCreateManyAndReturnArgs>(args?: SelectSubset<T, AppartenanceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppartenancePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Appartenance.
     * @param {AppartenanceDeleteArgs} args - Arguments to delete one Appartenance.
     * @example
     * // Delete one Appartenance
     * const Appartenance = await prisma.appartenance.delete({
     *   where: {
     *     // ... filter to delete one Appartenance
     *   }
     * })
     * 
     */
    delete<T extends AppartenanceDeleteArgs>(args: SelectSubset<T, AppartenanceDeleteArgs<ExtArgs>>): Prisma__AppartenanceClient<$Result.GetResult<Prisma.$AppartenancePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Appartenance.
     * @param {AppartenanceUpdateArgs} args - Arguments to update one Appartenance.
     * @example
     * // Update one Appartenance
     * const appartenance = await prisma.appartenance.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AppartenanceUpdateArgs>(args: SelectSubset<T, AppartenanceUpdateArgs<ExtArgs>>): Prisma__AppartenanceClient<$Result.GetResult<Prisma.$AppartenancePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Appartenances.
     * @param {AppartenanceDeleteManyArgs} args - Arguments to filter Appartenances to delete.
     * @example
     * // Delete a few Appartenances
     * const { count } = await prisma.appartenance.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AppartenanceDeleteManyArgs>(args?: SelectSubset<T, AppartenanceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Appartenances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppartenanceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Appartenances
     * const appartenance = await prisma.appartenance.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AppartenanceUpdateManyArgs>(args: SelectSubset<T, AppartenanceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Appartenances and returns the data updated in the database.
     * @param {AppartenanceUpdateManyAndReturnArgs} args - Arguments to update many Appartenances.
     * @example
     * // Update many Appartenances
     * const appartenance = await prisma.appartenance.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Appartenances and only return the `id`
     * const appartenanceWithIdOnly = await prisma.appartenance.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AppartenanceUpdateManyAndReturnArgs>(args: SelectSubset<T, AppartenanceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppartenancePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Appartenance.
     * @param {AppartenanceUpsertArgs} args - Arguments to update or create a Appartenance.
     * @example
     * // Update or create a Appartenance
     * const appartenance = await prisma.appartenance.upsert({
     *   create: {
     *     // ... data to create a Appartenance
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Appartenance we want to update
     *   }
     * })
     */
    upsert<T extends AppartenanceUpsertArgs>(args: SelectSubset<T, AppartenanceUpsertArgs<ExtArgs>>): Prisma__AppartenanceClient<$Result.GetResult<Prisma.$AppartenancePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Appartenances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppartenanceCountArgs} args - Arguments to filter Appartenances to count.
     * @example
     * // Count the number of Appartenances
     * const count = await prisma.appartenance.count({
     *   where: {
     *     // ... the filter for the Appartenances we want to count
     *   }
     * })
    **/
    count<T extends AppartenanceCountArgs>(
      args?: Subset<T, AppartenanceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AppartenanceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Appartenance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppartenanceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AppartenanceAggregateArgs>(args: Subset<T, AppartenanceAggregateArgs>): Prisma.PrismaPromise<GetAppartenanceAggregateType<T>>

    /**
     * Group by Appartenance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppartenanceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AppartenanceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AppartenanceGroupByArgs['orderBy'] }
        : { orderBy?: AppartenanceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AppartenanceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAppartenanceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Appartenance model
   */
  readonly fields: AppartenanceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Appartenance.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AppartenanceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    coproprietaire<T extends CoproprietaireDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CoproprietaireDefaultArgs<ExtArgs>>): Prisma__CoproprietaireClient<$Result.GetResult<Prisma.$CoproprietairePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    lot<T extends LotDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LotDefaultArgs<ExtArgs>>): Prisma__LotClient<$Result.GetResult<Prisma.$LotPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Appartenance model
   */
  interface AppartenanceFieldRefs {
    readonly id: FieldRef<"Appartenance", 'Int'>
    readonly lotId: FieldRef<"Appartenance", 'Int'>
    readonly coproprietaireId: FieldRef<"Appartenance", 'Int'>
    readonly pourcentage: FieldRef<"Appartenance", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * Appartenance findUnique
   */
  export type AppartenanceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appartenance
     */
    select?: AppartenanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appartenance
     */
    omit?: AppartenanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppartenanceInclude<ExtArgs> | null
    /**
     * Filter, which Appartenance to fetch.
     */
    where: AppartenanceWhereUniqueInput
  }

  /**
   * Appartenance findUniqueOrThrow
   */
  export type AppartenanceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appartenance
     */
    select?: AppartenanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appartenance
     */
    omit?: AppartenanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppartenanceInclude<ExtArgs> | null
    /**
     * Filter, which Appartenance to fetch.
     */
    where: AppartenanceWhereUniqueInput
  }

  /**
   * Appartenance findFirst
   */
  export type AppartenanceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appartenance
     */
    select?: AppartenanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appartenance
     */
    omit?: AppartenanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppartenanceInclude<ExtArgs> | null
    /**
     * Filter, which Appartenance to fetch.
     */
    where?: AppartenanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appartenances to fetch.
     */
    orderBy?: AppartenanceOrderByWithRelationInput | AppartenanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Appartenances.
     */
    cursor?: AppartenanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appartenances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appartenances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Appartenances.
     */
    distinct?: AppartenanceScalarFieldEnum | AppartenanceScalarFieldEnum[]
  }

  /**
   * Appartenance findFirstOrThrow
   */
  export type AppartenanceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appartenance
     */
    select?: AppartenanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appartenance
     */
    omit?: AppartenanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppartenanceInclude<ExtArgs> | null
    /**
     * Filter, which Appartenance to fetch.
     */
    where?: AppartenanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appartenances to fetch.
     */
    orderBy?: AppartenanceOrderByWithRelationInput | AppartenanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Appartenances.
     */
    cursor?: AppartenanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appartenances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appartenances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Appartenances.
     */
    distinct?: AppartenanceScalarFieldEnum | AppartenanceScalarFieldEnum[]
  }

  /**
   * Appartenance findMany
   */
  export type AppartenanceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appartenance
     */
    select?: AppartenanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appartenance
     */
    omit?: AppartenanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppartenanceInclude<ExtArgs> | null
    /**
     * Filter, which Appartenances to fetch.
     */
    where?: AppartenanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appartenances to fetch.
     */
    orderBy?: AppartenanceOrderByWithRelationInput | AppartenanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Appartenances.
     */
    cursor?: AppartenanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appartenances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appartenances.
     */
    skip?: number
    distinct?: AppartenanceScalarFieldEnum | AppartenanceScalarFieldEnum[]
  }

  /**
   * Appartenance create
   */
  export type AppartenanceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appartenance
     */
    select?: AppartenanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appartenance
     */
    omit?: AppartenanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppartenanceInclude<ExtArgs> | null
    /**
     * The data needed to create a Appartenance.
     */
    data: XOR<AppartenanceCreateInput, AppartenanceUncheckedCreateInput>
  }

  /**
   * Appartenance createMany
   */
  export type AppartenanceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Appartenances.
     */
    data: AppartenanceCreateManyInput | AppartenanceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Appartenance createManyAndReturn
   */
  export type AppartenanceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appartenance
     */
    select?: AppartenanceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Appartenance
     */
    omit?: AppartenanceOmit<ExtArgs> | null
    /**
     * The data used to create many Appartenances.
     */
    data: AppartenanceCreateManyInput | AppartenanceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppartenanceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Appartenance update
   */
  export type AppartenanceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appartenance
     */
    select?: AppartenanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appartenance
     */
    omit?: AppartenanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppartenanceInclude<ExtArgs> | null
    /**
     * The data needed to update a Appartenance.
     */
    data: XOR<AppartenanceUpdateInput, AppartenanceUncheckedUpdateInput>
    /**
     * Choose, which Appartenance to update.
     */
    where: AppartenanceWhereUniqueInput
  }

  /**
   * Appartenance updateMany
   */
  export type AppartenanceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Appartenances.
     */
    data: XOR<AppartenanceUpdateManyMutationInput, AppartenanceUncheckedUpdateManyInput>
    /**
     * Filter which Appartenances to update
     */
    where?: AppartenanceWhereInput
    /**
     * Limit how many Appartenances to update.
     */
    limit?: number
  }

  /**
   * Appartenance updateManyAndReturn
   */
  export type AppartenanceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appartenance
     */
    select?: AppartenanceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Appartenance
     */
    omit?: AppartenanceOmit<ExtArgs> | null
    /**
     * The data used to update Appartenances.
     */
    data: XOR<AppartenanceUpdateManyMutationInput, AppartenanceUncheckedUpdateManyInput>
    /**
     * Filter which Appartenances to update
     */
    where?: AppartenanceWhereInput
    /**
     * Limit how many Appartenances to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppartenanceIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Appartenance upsert
   */
  export type AppartenanceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appartenance
     */
    select?: AppartenanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appartenance
     */
    omit?: AppartenanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppartenanceInclude<ExtArgs> | null
    /**
     * The filter to search for the Appartenance to update in case it exists.
     */
    where: AppartenanceWhereUniqueInput
    /**
     * In case the Appartenance found by the `where` argument doesn't exist, create a new Appartenance with this data.
     */
    create: XOR<AppartenanceCreateInput, AppartenanceUncheckedCreateInput>
    /**
     * In case the Appartenance was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AppartenanceUpdateInput, AppartenanceUncheckedUpdateInput>
  }

  /**
   * Appartenance delete
   */
  export type AppartenanceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appartenance
     */
    select?: AppartenanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appartenance
     */
    omit?: AppartenanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppartenanceInclude<ExtArgs> | null
    /**
     * Filter which Appartenance to delete.
     */
    where: AppartenanceWhereUniqueInput
  }

  /**
   * Appartenance deleteMany
   */
  export type AppartenanceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Appartenances to delete
     */
    where?: AppartenanceWhereInput
    /**
     * Limit how many Appartenances to delete.
     */
    limit?: number
  }

  /**
   * Appartenance without action
   */
  export type AppartenanceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appartenance
     */
    select?: AppartenanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appartenance
     */
    omit?: AppartenanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppartenanceInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    name: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    password: string
    name: string | null
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "password" | "name" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      password: string
      name: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const CoproprieteScalarFieldEnum: {
    id: 'id',
    nom: 'nom'
  };

  export type CoproprieteScalarFieldEnum = (typeof CoproprieteScalarFieldEnum)[keyof typeof CoproprieteScalarFieldEnum]


  export const LotScalarFieldEnum: {
    id: 'id',
    numero: 'numero',
    surface: 'surface',
    coproprieteId: 'coproprieteId'
  };

  export type LotScalarFieldEnum = (typeof LotScalarFieldEnum)[keyof typeof LotScalarFieldEnum]


  export const CoproprietaireScalarFieldEnum: {
    id: 'id',
    nom: 'nom',
    email: 'email',
    telephone: 'telephone'
  };

  export type CoproprietaireScalarFieldEnum = (typeof CoproprietaireScalarFieldEnum)[keyof typeof CoproprietaireScalarFieldEnum]


  export const AppartenanceScalarFieldEnum: {
    id: 'id',
    lotId: 'lotId',
    coproprietaireId: 'coproprietaireId',
    pourcentage: 'pourcentage'
  };

  export type AppartenanceScalarFieldEnum = (typeof AppartenanceScalarFieldEnum)[keyof typeof AppartenanceScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    
  /**
   * Deep Input Types
   */


  export type CoproprieteWhereInput = {
    AND?: CoproprieteWhereInput | CoproprieteWhereInput[]
    OR?: CoproprieteWhereInput[]
    NOT?: CoproprieteWhereInput | CoproprieteWhereInput[]
    id?: IntFilter<"Copropriete"> | number
    nom?: StringFilter<"Copropriete"> | string
    lots?: LotListRelationFilter
  }

  export type CoproprieteOrderByWithRelationInput = {
    id?: SortOrder
    nom?: SortOrder
    lots?: LotOrderByRelationAggregateInput
  }

  export type CoproprieteWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CoproprieteWhereInput | CoproprieteWhereInput[]
    OR?: CoproprieteWhereInput[]
    NOT?: CoproprieteWhereInput | CoproprieteWhereInput[]
    nom?: StringFilter<"Copropriete"> | string
    lots?: LotListRelationFilter
  }, "id">

  export type CoproprieteOrderByWithAggregationInput = {
    id?: SortOrder
    nom?: SortOrder
    _count?: CoproprieteCountOrderByAggregateInput
    _avg?: CoproprieteAvgOrderByAggregateInput
    _max?: CoproprieteMaxOrderByAggregateInput
    _min?: CoproprieteMinOrderByAggregateInput
    _sum?: CoproprieteSumOrderByAggregateInput
  }

  export type CoproprieteScalarWhereWithAggregatesInput = {
    AND?: CoproprieteScalarWhereWithAggregatesInput | CoproprieteScalarWhereWithAggregatesInput[]
    OR?: CoproprieteScalarWhereWithAggregatesInput[]
    NOT?: CoproprieteScalarWhereWithAggregatesInput | CoproprieteScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Copropriete"> | number
    nom?: StringWithAggregatesFilter<"Copropriete"> | string
  }

  export type LotWhereInput = {
    AND?: LotWhereInput | LotWhereInput[]
    OR?: LotWhereInput[]
    NOT?: LotWhereInput | LotWhereInput[]
    id?: IntFilter<"Lot"> | number
    numero?: StringFilter<"Lot"> | string
    surface?: FloatNullableFilter<"Lot"> | number | null
    coproprieteId?: IntFilter<"Lot"> | number
    appartenances?: AppartenanceListRelationFilter
    copropriete?: XOR<CoproprieteScalarRelationFilter, CoproprieteWhereInput>
  }

  export type LotOrderByWithRelationInput = {
    id?: SortOrder
    numero?: SortOrder
    surface?: SortOrderInput | SortOrder
    coproprieteId?: SortOrder
    appartenances?: AppartenanceOrderByRelationAggregateInput
    copropriete?: CoproprieteOrderByWithRelationInput
  }

  export type LotWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: LotWhereInput | LotWhereInput[]
    OR?: LotWhereInput[]
    NOT?: LotWhereInput | LotWhereInput[]
    numero?: StringFilter<"Lot"> | string
    surface?: FloatNullableFilter<"Lot"> | number | null
    coproprieteId?: IntFilter<"Lot"> | number
    appartenances?: AppartenanceListRelationFilter
    copropriete?: XOR<CoproprieteScalarRelationFilter, CoproprieteWhereInput>
  }, "id">

  export type LotOrderByWithAggregationInput = {
    id?: SortOrder
    numero?: SortOrder
    surface?: SortOrderInput | SortOrder
    coproprieteId?: SortOrder
    _count?: LotCountOrderByAggregateInput
    _avg?: LotAvgOrderByAggregateInput
    _max?: LotMaxOrderByAggregateInput
    _min?: LotMinOrderByAggregateInput
    _sum?: LotSumOrderByAggregateInput
  }

  export type LotScalarWhereWithAggregatesInput = {
    AND?: LotScalarWhereWithAggregatesInput | LotScalarWhereWithAggregatesInput[]
    OR?: LotScalarWhereWithAggregatesInput[]
    NOT?: LotScalarWhereWithAggregatesInput | LotScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Lot"> | number
    numero?: StringWithAggregatesFilter<"Lot"> | string
    surface?: FloatNullableWithAggregatesFilter<"Lot"> | number | null
    coproprieteId?: IntWithAggregatesFilter<"Lot"> | number
  }

  export type CoproprietaireWhereInput = {
    AND?: CoproprietaireWhereInput | CoproprietaireWhereInput[]
    OR?: CoproprietaireWhereInput[]
    NOT?: CoproprietaireWhereInput | CoproprietaireWhereInput[]
    id?: IntFilter<"Coproprietaire"> | number
    nom?: StringFilter<"Coproprietaire"> | string
    email?: StringNullableFilter<"Coproprietaire"> | string | null
    telephone?: StringNullableFilter<"Coproprietaire"> | string | null
    appartenances?: AppartenanceListRelationFilter
  }

  export type CoproprietaireOrderByWithRelationInput = {
    id?: SortOrder
    nom?: SortOrder
    email?: SortOrderInput | SortOrder
    telephone?: SortOrderInput | SortOrder
    appartenances?: AppartenanceOrderByRelationAggregateInput
  }

  export type CoproprietaireWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CoproprietaireWhereInput | CoproprietaireWhereInput[]
    OR?: CoproprietaireWhereInput[]
    NOT?: CoproprietaireWhereInput | CoproprietaireWhereInput[]
    nom?: StringFilter<"Coproprietaire"> | string
    email?: StringNullableFilter<"Coproprietaire"> | string | null
    telephone?: StringNullableFilter<"Coproprietaire"> | string | null
    appartenances?: AppartenanceListRelationFilter
  }, "id">

  export type CoproprietaireOrderByWithAggregationInput = {
    id?: SortOrder
    nom?: SortOrder
    email?: SortOrderInput | SortOrder
    telephone?: SortOrderInput | SortOrder
    _count?: CoproprietaireCountOrderByAggregateInput
    _avg?: CoproprietaireAvgOrderByAggregateInput
    _max?: CoproprietaireMaxOrderByAggregateInput
    _min?: CoproprietaireMinOrderByAggregateInput
    _sum?: CoproprietaireSumOrderByAggregateInput
  }

  export type CoproprietaireScalarWhereWithAggregatesInput = {
    AND?: CoproprietaireScalarWhereWithAggregatesInput | CoproprietaireScalarWhereWithAggregatesInput[]
    OR?: CoproprietaireScalarWhereWithAggregatesInput[]
    NOT?: CoproprietaireScalarWhereWithAggregatesInput | CoproprietaireScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Coproprietaire"> | number
    nom?: StringWithAggregatesFilter<"Coproprietaire"> | string
    email?: StringNullableWithAggregatesFilter<"Coproprietaire"> | string | null
    telephone?: StringNullableWithAggregatesFilter<"Coproprietaire"> | string | null
  }

  export type AppartenanceWhereInput = {
    AND?: AppartenanceWhereInput | AppartenanceWhereInput[]
    OR?: AppartenanceWhereInput[]
    NOT?: AppartenanceWhereInput | AppartenanceWhereInput[]
    id?: IntFilter<"Appartenance"> | number
    lotId?: IntFilter<"Appartenance"> | number
    coproprietaireId?: IntFilter<"Appartenance"> | number
    pourcentage?: FloatFilter<"Appartenance"> | number
    coproprietaire?: XOR<CoproprietaireScalarRelationFilter, CoproprietaireWhereInput>
    lot?: XOR<LotScalarRelationFilter, LotWhereInput>
  }

  export type AppartenanceOrderByWithRelationInput = {
    id?: SortOrder
    lotId?: SortOrder
    coproprietaireId?: SortOrder
    pourcentage?: SortOrder
    coproprietaire?: CoproprietaireOrderByWithRelationInput
    lot?: LotOrderByWithRelationInput
  }

  export type AppartenanceWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    lotId_coproprietaireId?: AppartenanceLotIdCoproprietaireIdCompoundUniqueInput
    AND?: AppartenanceWhereInput | AppartenanceWhereInput[]
    OR?: AppartenanceWhereInput[]
    NOT?: AppartenanceWhereInput | AppartenanceWhereInput[]
    lotId?: IntFilter<"Appartenance"> | number
    coproprietaireId?: IntFilter<"Appartenance"> | number
    pourcentage?: FloatFilter<"Appartenance"> | number
    coproprietaire?: XOR<CoproprietaireScalarRelationFilter, CoproprietaireWhereInput>
    lot?: XOR<LotScalarRelationFilter, LotWhereInput>
  }, "id" | "lotId_coproprietaireId">

  export type AppartenanceOrderByWithAggregationInput = {
    id?: SortOrder
    lotId?: SortOrder
    coproprietaireId?: SortOrder
    pourcentage?: SortOrder
    _count?: AppartenanceCountOrderByAggregateInput
    _avg?: AppartenanceAvgOrderByAggregateInput
    _max?: AppartenanceMaxOrderByAggregateInput
    _min?: AppartenanceMinOrderByAggregateInput
    _sum?: AppartenanceSumOrderByAggregateInput
  }

  export type AppartenanceScalarWhereWithAggregatesInput = {
    AND?: AppartenanceScalarWhereWithAggregatesInput | AppartenanceScalarWhereWithAggregatesInput[]
    OR?: AppartenanceScalarWhereWithAggregatesInput[]
    NOT?: AppartenanceScalarWhereWithAggregatesInput | AppartenanceScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Appartenance"> | number
    lotId?: IntWithAggregatesFilter<"Appartenance"> | number
    coproprietaireId?: IntWithAggregatesFilter<"Appartenance"> | number
    pourcentage?: FloatWithAggregatesFilter<"Appartenance"> | number
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type CoproprieteCreateInput = {
    nom: string
    lots?: LotCreateNestedManyWithoutCoproprieteInput
  }

  export type CoproprieteUncheckedCreateInput = {
    id?: number
    nom: string
    lots?: LotUncheckedCreateNestedManyWithoutCoproprieteInput
  }

  export type CoproprieteUpdateInput = {
    nom?: StringFieldUpdateOperationsInput | string
    lots?: LotUpdateManyWithoutCoproprieteNestedInput
  }

  export type CoproprieteUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    lots?: LotUncheckedUpdateManyWithoutCoproprieteNestedInput
  }

  export type CoproprieteCreateManyInput = {
    id?: number
    nom: string
  }

  export type CoproprieteUpdateManyMutationInput = {
    nom?: StringFieldUpdateOperationsInput | string
  }

  export type CoproprieteUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
  }

  export type LotCreateInput = {
    numero: string
    surface?: number | null
    appartenances?: AppartenanceCreateNestedManyWithoutLotInput
    copropriete: CoproprieteCreateNestedOneWithoutLotsInput
  }

  export type LotUncheckedCreateInput = {
    id?: number
    numero: string
    surface?: number | null
    coproprieteId: number
    appartenances?: AppartenanceUncheckedCreateNestedManyWithoutLotInput
  }

  export type LotUpdateInput = {
    numero?: StringFieldUpdateOperationsInput | string
    surface?: NullableFloatFieldUpdateOperationsInput | number | null
    appartenances?: AppartenanceUpdateManyWithoutLotNestedInput
    copropriete?: CoproprieteUpdateOneRequiredWithoutLotsNestedInput
  }

  export type LotUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    numero?: StringFieldUpdateOperationsInput | string
    surface?: NullableFloatFieldUpdateOperationsInput | number | null
    coproprieteId?: IntFieldUpdateOperationsInput | number
    appartenances?: AppartenanceUncheckedUpdateManyWithoutLotNestedInput
  }

  export type LotCreateManyInput = {
    id?: number
    numero: string
    surface?: number | null
    coproprieteId: number
  }

  export type LotUpdateManyMutationInput = {
    numero?: StringFieldUpdateOperationsInput | string
    surface?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type LotUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    numero?: StringFieldUpdateOperationsInput | string
    surface?: NullableFloatFieldUpdateOperationsInput | number | null
    coproprieteId?: IntFieldUpdateOperationsInput | number
  }

  export type CoproprietaireCreateInput = {
    nom: string
    email?: string | null
    telephone?: string | null
    appartenances?: AppartenanceCreateNestedManyWithoutCoproprietaireInput
  }

  export type CoproprietaireUncheckedCreateInput = {
    id?: number
    nom: string
    email?: string | null
    telephone?: string | null
    appartenances?: AppartenanceUncheckedCreateNestedManyWithoutCoproprietaireInput
  }

  export type CoproprietaireUpdateInput = {
    nom?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    appartenances?: AppartenanceUpdateManyWithoutCoproprietaireNestedInput
  }

  export type CoproprietaireUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    appartenances?: AppartenanceUncheckedUpdateManyWithoutCoproprietaireNestedInput
  }

  export type CoproprietaireCreateManyInput = {
    id?: number
    nom: string
    email?: string | null
    telephone?: string | null
  }

  export type CoproprietaireUpdateManyMutationInput = {
    nom?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CoproprietaireUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AppartenanceCreateInput = {
    pourcentage: number
    coproprietaire: CoproprietaireCreateNestedOneWithoutAppartenancesInput
    lot: LotCreateNestedOneWithoutAppartenancesInput
  }

  export type AppartenanceUncheckedCreateInput = {
    id?: number
    lotId: number
    coproprietaireId: number
    pourcentage: number
  }

  export type AppartenanceUpdateInput = {
    pourcentage?: FloatFieldUpdateOperationsInput | number
    coproprietaire?: CoproprietaireUpdateOneRequiredWithoutAppartenancesNestedInput
    lot?: LotUpdateOneRequiredWithoutAppartenancesNestedInput
  }

  export type AppartenanceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    lotId?: IntFieldUpdateOperationsInput | number
    coproprietaireId?: IntFieldUpdateOperationsInput | number
    pourcentage?: FloatFieldUpdateOperationsInput | number
  }

  export type AppartenanceCreateManyInput = {
    id?: number
    lotId: number
    coproprietaireId: number
    pourcentage: number
  }

  export type AppartenanceUpdateManyMutationInput = {
    pourcentage?: FloatFieldUpdateOperationsInput | number
  }

  export type AppartenanceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    lotId?: IntFieldUpdateOperationsInput | number
    coproprietaireId?: IntFieldUpdateOperationsInput | number
    pourcentage?: FloatFieldUpdateOperationsInput | number
  }

  export type UserCreateInput = {
    id?: string
    email: string
    password: string
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    password: string
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    password: string
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type LotListRelationFilter = {
    every?: LotWhereInput
    some?: LotWhereInput
    none?: LotWhereInput
  }

  export type LotOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CoproprieteCountOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
  }

  export type CoproprieteAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CoproprieteMaxOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
  }

  export type CoproprieteMinOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
  }

  export type CoproprieteSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type AppartenanceListRelationFilter = {
    every?: AppartenanceWhereInput
    some?: AppartenanceWhereInput
    none?: AppartenanceWhereInput
  }

  export type CoproprieteScalarRelationFilter = {
    is?: CoproprieteWhereInput
    isNot?: CoproprieteWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type AppartenanceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LotCountOrderByAggregateInput = {
    id?: SortOrder
    numero?: SortOrder
    surface?: SortOrder
    coproprieteId?: SortOrder
  }

  export type LotAvgOrderByAggregateInput = {
    id?: SortOrder
    surface?: SortOrder
    coproprieteId?: SortOrder
  }

  export type LotMaxOrderByAggregateInput = {
    id?: SortOrder
    numero?: SortOrder
    surface?: SortOrder
    coproprieteId?: SortOrder
  }

  export type LotMinOrderByAggregateInput = {
    id?: SortOrder
    numero?: SortOrder
    surface?: SortOrder
    coproprieteId?: SortOrder
  }

  export type LotSumOrderByAggregateInput = {
    id?: SortOrder
    surface?: SortOrder
    coproprieteId?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type CoproprietaireCountOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    email?: SortOrder
    telephone?: SortOrder
  }

  export type CoproprietaireAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CoproprietaireMaxOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    email?: SortOrder
    telephone?: SortOrder
  }

  export type CoproprietaireMinOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    email?: SortOrder
    telephone?: SortOrder
  }

  export type CoproprietaireSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type CoproprietaireScalarRelationFilter = {
    is?: CoproprietaireWhereInput
    isNot?: CoproprietaireWhereInput
  }

  export type LotScalarRelationFilter = {
    is?: LotWhereInput
    isNot?: LotWhereInput
  }

  export type AppartenanceLotIdCoproprietaireIdCompoundUniqueInput = {
    lotId: number
    coproprietaireId: number
  }

  export type AppartenanceCountOrderByAggregateInput = {
    id?: SortOrder
    lotId?: SortOrder
    coproprietaireId?: SortOrder
    pourcentage?: SortOrder
  }

  export type AppartenanceAvgOrderByAggregateInput = {
    id?: SortOrder
    lotId?: SortOrder
    coproprietaireId?: SortOrder
    pourcentage?: SortOrder
  }

  export type AppartenanceMaxOrderByAggregateInput = {
    id?: SortOrder
    lotId?: SortOrder
    coproprietaireId?: SortOrder
    pourcentage?: SortOrder
  }

  export type AppartenanceMinOrderByAggregateInput = {
    id?: SortOrder
    lotId?: SortOrder
    coproprietaireId?: SortOrder
    pourcentage?: SortOrder
  }

  export type AppartenanceSumOrderByAggregateInput = {
    id?: SortOrder
    lotId?: SortOrder
    coproprietaireId?: SortOrder
    pourcentage?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type LotCreateNestedManyWithoutCoproprieteInput = {
    create?: XOR<LotCreateWithoutCoproprieteInput, LotUncheckedCreateWithoutCoproprieteInput> | LotCreateWithoutCoproprieteInput[] | LotUncheckedCreateWithoutCoproprieteInput[]
    connectOrCreate?: LotCreateOrConnectWithoutCoproprieteInput | LotCreateOrConnectWithoutCoproprieteInput[]
    createMany?: LotCreateManyCoproprieteInputEnvelope
    connect?: LotWhereUniqueInput | LotWhereUniqueInput[]
  }

  export type LotUncheckedCreateNestedManyWithoutCoproprieteInput = {
    create?: XOR<LotCreateWithoutCoproprieteInput, LotUncheckedCreateWithoutCoproprieteInput> | LotCreateWithoutCoproprieteInput[] | LotUncheckedCreateWithoutCoproprieteInput[]
    connectOrCreate?: LotCreateOrConnectWithoutCoproprieteInput | LotCreateOrConnectWithoutCoproprieteInput[]
    createMany?: LotCreateManyCoproprieteInputEnvelope
    connect?: LotWhereUniqueInput | LotWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type LotUpdateManyWithoutCoproprieteNestedInput = {
    create?: XOR<LotCreateWithoutCoproprieteInput, LotUncheckedCreateWithoutCoproprieteInput> | LotCreateWithoutCoproprieteInput[] | LotUncheckedCreateWithoutCoproprieteInput[]
    connectOrCreate?: LotCreateOrConnectWithoutCoproprieteInput | LotCreateOrConnectWithoutCoproprieteInput[]
    upsert?: LotUpsertWithWhereUniqueWithoutCoproprieteInput | LotUpsertWithWhereUniqueWithoutCoproprieteInput[]
    createMany?: LotCreateManyCoproprieteInputEnvelope
    set?: LotWhereUniqueInput | LotWhereUniqueInput[]
    disconnect?: LotWhereUniqueInput | LotWhereUniqueInput[]
    delete?: LotWhereUniqueInput | LotWhereUniqueInput[]
    connect?: LotWhereUniqueInput | LotWhereUniqueInput[]
    update?: LotUpdateWithWhereUniqueWithoutCoproprieteInput | LotUpdateWithWhereUniqueWithoutCoproprieteInput[]
    updateMany?: LotUpdateManyWithWhereWithoutCoproprieteInput | LotUpdateManyWithWhereWithoutCoproprieteInput[]
    deleteMany?: LotScalarWhereInput | LotScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type LotUncheckedUpdateManyWithoutCoproprieteNestedInput = {
    create?: XOR<LotCreateWithoutCoproprieteInput, LotUncheckedCreateWithoutCoproprieteInput> | LotCreateWithoutCoproprieteInput[] | LotUncheckedCreateWithoutCoproprieteInput[]
    connectOrCreate?: LotCreateOrConnectWithoutCoproprieteInput | LotCreateOrConnectWithoutCoproprieteInput[]
    upsert?: LotUpsertWithWhereUniqueWithoutCoproprieteInput | LotUpsertWithWhereUniqueWithoutCoproprieteInput[]
    createMany?: LotCreateManyCoproprieteInputEnvelope
    set?: LotWhereUniqueInput | LotWhereUniqueInput[]
    disconnect?: LotWhereUniqueInput | LotWhereUniqueInput[]
    delete?: LotWhereUniqueInput | LotWhereUniqueInput[]
    connect?: LotWhereUniqueInput | LotWhereUniqueInput[]
    update?: LotUpdateWithWhereUniqueWithoutCoproprieteInput | LotUpdateWithWhereUniqueWithoutCoproprieteInput[]
    updateMany?: LotUpdateManyWithWhereWithoutCoproprieteInput | LotUpdateManyWithWhereWithoutCoproprieteInput[]
    deleteMany?: LotScalarWhereInput | LotScalarWhereInput[]
  }

  export type AppartenanceCreateNestedManyWithoutLotInput = {
    create?: XOR<AppartenanceCreateWithoutLotInput, AppartenanceUncheckedCreateWithoutLotInput> | AppartenanceCreateWithoutLotInput[] | AppartenanceUncheckedCreateWithoutLotInput[]
    connectOrCreate?: AppartenanceCreateOrConnectWithoutLotInput | AppartenanceCreateOrConnectWithoutLotInput[]
    createMany?: AppartenanceCreateManyLotInputEnvelope
    connect?: AppartenanceWhereUniqueInput | AppartenanceWhereUniqueInput[]
  }

  export type CoproprieteCreateNestedOneWithoutLotsInput = {
    create?: XOR<CoproprieteCreateWithoutLotsInput, CoproprieteUncheckedCreateWithoutLotsInput>
    connectOrCreate?: CoproprieteCreateOrConnectWithoutLotsInput
    connect?: CoproprieteWhereUniqueInput
  }

  export type AppartenanceUncheckedCreateNestedManyWithoutLotInput = {
    create?: XOR<AppartenanceCreateWithoutLotInput, AppartenanceUncheckedCreateWithoutLotInput> | AppartenanceCreateWithoutLotInput[] | AppartenanceUncheckedCreateWithoutLotInput[]
    connectOrCreate?: AppartenanceCreateOrConnectWithoutLotInput | AppartenanceCreateOrConnectWithoutLotInput[]
    createMany?: AppartenanceCreateManyLotInputEnvelope
    connect?: AppartenanceWhereUniqueInput | AppartenanceWhereUniqueInput[]
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type AppartenanceUpdateManyWithoutLotNestedInput = {
    create?: XOR<AppartenanceCreateWithoutLotInput, AppartenanceUncheckedCreateWithoutLotInput> | AppartenanceCreateWithoutLotInput[] | AppartenanceUncheckedCreateWithoutLotInput[]
    connectOrCreate?: AppartenanceCreateOrConnectWithoutLotInput | AppartenanceCreateOrConnectWithoutLotInput[]
    upsert?: AppartenanceUpsertWithWhereUniqueWithoutLotInput | AppartenanceUpsertWithWhereUniqueWithoutLotInput[]
    createMany?: AppartenanceCreateManyLotInputEnvelope
    set?: AppartenanceWhereUniqueInput | AppartenanceWhereUniqueInput[]
    disconnect?: AppartenanceWhereUniqueInput | AppartenanceWhereUniqueInput[]
    delete?: AppartenanceWhereUniqueInput | AppartenanceWhereUniqueInput[]
    connect?: AppartenanceWhereUniqueInput | AppartenanceWhereUniqueInput[]
    update?: AppartenanceUpdateWithWhereUniqueWithoutLotInput | AppartenanceUpdateWithWhereUniqueWithoutLotInput[]
    updateMany?: AppartenanceUpdateManyWithWhereWithoutLotInput | AppartenanceUpdateManyWithWhereWithoutLotInput[]
    deleteMany?: AppartenanceScalarWhereInput | AppartenanceScalarWhereInput[]
  }

  export type CoproprieteUpdateOneRequiredWithoutLotsNestedInput = {
    create?: XOR<CoproprieteCreateWithoutLotsInput, CoproprieteUncheckedCreateWithoutLotsInput>
    connectOrCreate?: CoproprieteCreateOrConnectWithoutLotsInput
    upsert?: CoproprieteUpsertWithoutLotsInput
    connect?: CoproprieteWhereUniqueInput
    update?: XOR<XOR<CoproprieteUpdateToOneWithWhereWithoutLotsInput, CoproprieteUpdateWithoutLotsInput>, CoproprieteUncheckedUpdateWithoutLotsInput>
  }

  export type AppartenanceUncheckedUpdateManyWithoutLotNestedInput = {
    create?: XOR<AppartenanceCreateWithoutLotInput, AppartenanceUncheckedCreateWithoutLotInput> | AppartenanceCreateWithoutLotInput[] | AppartenanceUncheckedCreateWithoutLotInput[]
    connectOrCreate?: AppartenanceCreateOrConnectWithoutLotInput | AppartenanceCreateOrConnectWithoutLotInput[]
    upsert?: AppartenanceUpsertWithWhereUniqueWithoutLotInput | AppartenanceUpsertWithWhereUniqueWithoutLotInput[]
    createMany?: AppartenanceCreateManyLotInputEnvelope
    set?: AppartenanceWhereUniqueInput | AppartenanceWhereUniqueInput[]
    disconnect?: AppartenanceWhereUniqueInput | AppartenanceWhereUniqueInput[]
    delete?: AppartenanceWhereUniqueInput | AppartenanceWhereUniqueInput[]
    connect?: AppartenanceWhereUniqueInput | AppartenanceWhereUniqueInput[]
    update?: AppartenanceUpdateWithWhereUniqueWithoutLotInput | AppartenanceUpdateWithWhereUniqueWithoutLotInput[]
    updateMany?: AppartenanceUpdateManyWithWhereWithoutLotInput | AppartenanceUpdateManyWithWhereWithoutLotInput[]
    deleteMany?: AppartenanceScalarWhereInput | AppartenanceScalarWhereInput[]
  }

  export type AppartenanceCreateNestedManyWithoutCoproprietaireInput = {
    create?: XOR<AppartenanceCreateWithoutCoproprietaireInput, AppartenanceUncheckedCreateWithoutCoproprietaireInput> | AppartenanceCreateWithoutCoproprietaireInput[] | AppartenanceUncheckedCreateWithoutCoproprietaireInput[]
    connectOrCreate?: AppartenanceCreateOrConnectWithoutCoproprietaireInput | AppartenanceCreateOrConnectWithoutCoproprietaireInput[]
    createMany?: AppartenanceCreateManyCoproprietaireInputEnvelope
    connect?: AppartenanceWhereUniqueInput | AppartenanceWhereUniqueInput[]
  }

  export type AppartenanceUncheckedCreateNestedManyWithoutCoproprietaireInput = {
    create?: XOR<AppartenanceCreateWithoutCoproprietaireInput, AppartenanceUncheckedCreateWithoutCoproprietaireInput> | AppartenanceCreateWithoutCoproprietaireInput[] | AppartenanceUncheckedCreateWithoutCoproprietaireInput[]
    connectOrCreate?: AppartenanceCreateOrConnectWithoutCoproprietaireInput | AppartenanceCreateOrConnectWithoutCoproprietaireInput[]
    createMany?: AppartenanceCreateManyCoproprietaireInputEnvelope
    connect?: AppartenanceWhereUniqueInput | AppartenanceWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type AppartenanceUpdateManyWithoutCoproprietaireNestedInput = {
    create?: XOR<AppartenanceCreateWithoutCoproprietaireInput, AppartenanceUncheckedCreateWithoutCoproprietaireInput> | AppartenanceCreateWithoutCoproprietaireInput[] | AppartenanceUncheckedCreateWithoutCoproprietaireInput[]
    connectOrCreate?: AppartenanceCreateOrConnectWithoutCoproprietaireInput | AppartenanceCreateOrConnectWithoutCoproprietaireInput[]
    upsert?: AppartenanceUpsertWithWhereUniqueWithoutCoproprietaireInput | AppartenanceUpsertWithWhereUniqueWithoutCoproprietaireInput[]
    createMany?: AppartenanceCreateManyCoproprietaireInputEnvelope
    set?: AppartenanceWhereUniqueInput | AppartenanceWhereUniqueInput[]
    disconnect?: AppartenanceWhereUniqueInput | AppartenanceWhereUniqueInput[]
    delete?: AppartenanceWhereUniqueInput | AppartenanceWhereUniqueInput[]
    connect?: AppartenanceWhereUniqueInput | AppartenanceWhereUniqueInput[]
    update?: AppartenanceUpdateWithWhereUniqueWithoutCoproprietaireInput | AppartenanceUpdateWithWhereUniqueWithoutCoproprietaireInput[]
    updateMany?: AppartenanceUpdateManyWithWhereWithoutCoproprietaireInput | AppartenanceUpdateManyWithWhereWithoutCoproprietaireInput[]
    deleteMany?: AppartenanceScalarWhereInput | AppartenanceScalarWhereInput[]
  }

  export type AppartenanceUncheckedUpdateManyWithoutCoproprietaireNestedInput = {
    create?: XOR<AppartenanceCreateWithoutCoproprietaireInput, AppartenanceUncheckedCreateWithoutCoproprietaireInput> | AppartenanceCreateWithoutCoproprietaireInput[] | AppartenanceUncheckedCreateWithoutCoproprietaireInput[]
    connectOrCreate?: AppartenanceCreateOrConnectWithoutCoproprietaireInput | AppartenanceCreateOrConnectWithoutCoproprietaireInput[]
    upsert?: AppartenanceUpsertWithWhereUniqueWithoutCoproprietaireInput | AppartenanceUpsertWithWhereUniqueWithoutCoproprietaireInput[]
    createMany?: AppartenanceCreateManyCoproprietaireInputEnvelope
    set?: AppartenanceWhereUniqueInput | AppartenanceWhereUniqueInput[]
    disconnect?: AppartenanceWhereUniqueInput | AppartenanceWhereUniqueInput[]
    delete?: AppartenanceWhereUniqueInput | AppartenanceWhereUniqueInput[]
    connect?: AppartenanceWhereUniqueInput | AppartenanceWhereUniqueInput[]
    update?: AppartenanceUpdateWithWhereUniqueWithoutCoproprietaireInput | AppartenanceUpdateWithWhereUniqueWithoutCoproprietaireInput[]
    updateMany?: AppartenanceUpdateManyWithWhereWithoutCoproprietaireInput | AppartenanceUpdateManyWithWhereWithoutCoproprietaireInput[]
    deleteMany?: AppartenanceScalarWhereInput | AppartenanceScalarWhereInput[]
  }

  export type CoproprietaireCreateNestedOneWithoutAppartenancesInput = {
    create?: XOR<CoproprietaireCreateWithoutAppartenancesInput, CoproprietaireUncheckedCreateWithoutAppartenancesInput>
    connectOrCreate?: CoproprietaireCreateOrConnectWithoutAppartenancesInput
    connect?: CoproprietaireWhereUniqueInput
  }

  export type LotCreateNestedOneWithoutAppartenancesInput = {
    create?: XOR<LotCreateWithoutAppartenancesInput, LotUncheckedCreateWithoutAppartenancesInput>
    connectOrCreate?: LotCreateOrConnectWithoutAppartenancesInput
    connect?: LotWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CoproprietaireUpdateOneRequiredWithoutAppartenancesNestedInput = {
    create?: XOR<CoproprietaireCreateWithoutAppartenancesInput, CoproprietaireUncheckedCreateWithoutAppartenancesInput>
    connectOrCreate?: CoproprietaireCreateOrConnectWithoutAppartenancesInput
    upsert?: CoproprietaireUpsertWithoutAppartenancesInput
    connect?: CoproprietaireWhereUniqueInput
    update?: XOR<XOR<CoproprietaireUpdateToOneWithWhereWithoutAppartenancesInput, CoproprietaireUpdateWithoutAppartenancesInput>, CoproprietaireUncheckedUpdateWithoutAppartenancesInput>
  }

  export type LotUpdateOneRequiredWithoutAppartenancesNestedInput = {
    create?: XOR<LotCreateWithoutAppartenancesInput, LotUncheckedCreateWithoutAppartenancesInput>
    connectOrCreate?: LotCreateOrConnectWithoutAppartenancesInput
    upsert?: LotUpsertWithoutAppartenancesInput
    connect?: LotWhereUniqueInput
    update?: XOR<XOR<LotUpdateToOneWithWhereWithoutAppartenancesInput, LotUpdateWithoutAppartenancesInput>, LotUncheckedUpdateWithoutAppartenancesInput>
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type LotCreateWithoutCoproprieteInput = {
    numero: string
    surface?: number | null
    appartenances?: AppartenanceCreateNestedManyWithoutLotInput
  }

  export type LotUncheckedCreateWithoutCoproprieteInput = {
    id?: number
    numero: string
    surface?: number | null
    appartenances?: AppartenanceUncheckedCreateNestedManyWithoutLotInput
  }

  export type LotCreateOrConnectWithoutCoproprieteInput = {
    where: LotWhereUniqueInput
    create: XOR<LotCreateWithoutCoproprieteInput, LotUncheckedCreateWithoutCoproprieteInput>
  }

  export type LotCreateManyCoproprieteInputEnvelope = {
    data: LotCreateManyCoproprieteInput | LotCreateManyCoproprieteInput[]
    skipDuplicates?: boolean
  }

  export type LotUpsertWithWhereUniqueWithoutCoproprieteInput = {
    where: LotWhereUniqueInput
    update: XOR<LotUpdateWithoutCoproprieteInput, LotUncheckedUpdateWithoutCoproprieteInput>
    create: XOR<LotCreateWithoutCoproprieteInput, LotUncheckedCreateWithoutCoproprieteInput>
  }

  export type LotUpdateWithWhereUniqueWithoutCoproprieteInput = {
    where: LotWhereUniqueInput
    data: XOR<LotUpdateWithoutCoproprieteInput, LotUncheckedUpdateWithoutCoproprieteInput>
  }

  export type LotUpdateManyWithWhereWithoutCoproprieteInput = {
    where: LotScalarWhereInput
    data: XOR<LotUpdateManyMutationInput, LotUncheckedUpdateManyWithoutCoproprieteInput>
  }

  export type LotScalarWhereInput = {
    AND?: LotScalarWhereInput | LotScalarWhereInput[]
    OR?: LotScalarWhereInput[]
    NOT?: LotScalarWhereInput | LotScalarWhereInput[]
    id?: IntFilter<"Lot"> | number
    numero?: StringFilter<"Lot"> | string
    surface?: FloatNullableFilter<"Lot"> | number | null
    coproprieteId?: IntFilter<"Lot"> | number
  }

  export type AppartenanceCreateWithoutLotInput = {
    pourcentage: number
    coproprietaire: CoproprietaireCreateNestedOneWithoutAppartenancesInput
  }

  export type AppartenanceUncheckedCreateWithoutLotInput = {
    id?: number
    coproprietaireId: number
    pourcentage: number
  }

  export type AppartenanceCreateOrConnectWithoutLotInput = {
    where: AppartenanceWhereUniqueInput
    create: XOR<AppartenanceCreateWithoutLotInput, AppartenanceUncheckedCreateWithoutLotInput>
  }

  export type AppartenanceCreateManyLotInputEnvelope = {
    data: AppartenanceCreateManyLotInput | AppartenanceCreateManyLotInput[]
    skipDuplicates?: boolean
  }

  export type CoproprieteCreateWithoutLotsInput = {
    nom: string
  }

  export type CoproprieteUncheckedCreateWithoutLotsInput = {
    id?: number
    nom: string
  }

  export type CoproprieteCreateOrConnectWithoutLotsInput = {
    where: CoproprieteWhereUniqueInput
    create: XOR<CoproprieteCreateWithoutLotsInput, CoproprieteUncheckedCreateWithoutLotsInput>
  }

  export type AppartenanceUpsertWithWhereUniqueWithoutLotInput = {
    where: AppartenanceWhereUniqueInput
    update: XOR<AppartenanceUpdateWithoutLotInput, AppartenanceUncheckedUpdateWithoutLotInput>
    create: XOR<AppartenanceCreateWithoutLotInput, AppartenanceUncheckedCreateWithoutLotInput>
  }

  export type AppartenanceUpdateWithWhereUniqueWithoutLotInput = {
    where: AppartenanceWhereUniqueInput
    data: XOR<AppartenanceUpdateWithoutLotInput, AppartenanceUncheckedUpdateWithoutLotInput>
  }

  export type AppartenanceUpdateManyWithWhereWithoutLotInput = {
    where: AppartenanceScalarWhereInput
    data: XOR<AppartenanceUpdateManyMutationInput, AppartenanceUncheckedUpdateManyWithoutLotInput>
  }

  export type AppartenanceScalarWhereInput = {
    AND?: AppartenanceScalarWhereInput | AppartenanceScalarWhereInput[]
    OR?: AppartenanceScalarWhereInput[]
    NOT?: AppartenanceScalarWhereInput | AppartenanceScalarWhereInput[]
    id?: IntFilter<"Appartenance"> | number
    lotId?: IntFilter<"Appartenance"> | number
    coproprietaireId?: IntFilter<"Appartenance"> | number
    pourcentage?: FloatFilter<"Appartenance"> | number
  }

  export type CoproprieteUpsertWithoutLotsInput = {
    update: XOR<CoproprieteUpdateWithoutLotsInput, CoproprieteUncheckedUpdateWithoutLotsInput>
    create: XOR<CoproprieteCreateWithoutLotsInput, CoproprieteUncheckedCreateWithoutLotsInput>
    where?: CoproprieteWhereInput
  }

  export type CoproprieteUpdateToOneWithWhereWithoutLotsInput = {
    where?: CoproprieteWhereInput
    data: XOR<CoproprieteUpdateWithoutLotsInput, CoproprieteUncheckedUpdateWithoutLotsInput>
  }

  export type CoproprieteUpdateWithoutLotsInput = {
    nom?: StringFieldUpdateOperationsInput | string
  }

  export type CoproprieteUncheckedUpdateWithoutLotsInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
  }

  export type AppartenanceCreateWithoutCoproprietaireInput = {
    pourcentage: number
    lot: LotCreateNestedOneWithoutAppartenancesInput
  }

  export type AppartenanceUncheckedCreateWithoutCoproprietaireInput = {
    id?: number
    lotId: number
    pourcentage: number
  }

  export type AppartenanceCreateOrConnectWithoutCoproprietaireInput = {
    where: AppartenanceWhereUniqueInput
    create: XOR<AppartenanceCreateWithoutCoproprietaireInput, AppartenanceUncheckedCreateWithoutCoproprietaireInput>
  }

  export type AppartenanceCreateManyCoproprietaireInputEnvelope = {
    data: AppartenanceCreateManyCoproprietaireInput | AppartenanceCreateManyCoproprietaireInput[]
    skipDuplicates?: boolean
  }

  export type AppartenanceUpsertWithWhereUniqueWithoutCoproprietaireInput = {
    where: AppartenanceWhereUniqueInput
    update: XOR<AppartenanceUpdateWithoutCoproprietaireInput, AppartenanceUncheckedUpdateWithoutCoproprietaireInput>
    create: XOR<AppartenanceCreateWithoutCoproprietaireInput, AppartenanceUncheckedCreateWithoutCoproprietaireInput>
  }

  export type AppartenanceUpdateWithWhereUniqueWithoutCoproprietaireInput = {
    where: AppartenanceWhereUniqueInput
    data: XOR<AppartenanceUpdateWithoutCoproprietaireInput, AppartenanceUncheckedUpdateWithoutCoproprietaireInput>
  }

  export type AppartenanceUpdateManyWithWhereWithoutCoproprietaireInput = {
    where: AppartenanceScalarWhereInput
    data: XOR<AppartenanceUpdateManyMutationInput, AppartenanceUncheckedUpdateManyWithoutCoproprietaireInput>
  }

  export type CoproprietaireCreateWithoutAppartenancesInput = {
    nom: string
    email?: string | null
    telephone?: string | null
  }

  export type CoproprietaireUncheckedCreateWithoutAppartenancesInput = {
    id?: number
    nom: string
    email?: string | null
    telephone?: string | null
  }

  export type CoproprietaireCreateOrConnectWithoutAppartenancesInput = {
    where: CoproprietaireWhereUniqueInput
    create: XOR<CoproprietaireCreateWithoutAppartenancesInput, CoproprietaireUncheckedCreateWithoutAppartenancesInput>
  }

  export type LotCreateWithoutAppartenancesInput = {
    numero: string
    surface?: number | null
    copropriete: CoproprieteCreateNestedOneWithoutLotsInput
  }

  export type LotUncheckedCreateWithoutAppartenancesInput = {
    id?: number
    numero: string
    surface?: number | null
    coproprieteId: number
  }

  export type LotCreateOrConnectWithoutAppartenancesInput = {
    where: LotWhereUniqueInput
    create: XOR<LotCreateWithoutAppartenancesInput, LotUncheckedCreateWithoutAppartenancesInput>
  }

  export type CoproprietaireUpsertWithoutAppartenancesInput = {
    update: XOR<CoproprietaireUpdateWithoutAppartenancesInput, CoproprietaireUncheckedUpdateWithoutAppartenancesInput>
    create: XOR<CoproprietaireCreateWithoutAppartenancesInput, CoproprietaireUncheckedCreateWithoutAppartenancesInput>
    where?: CoproprietaireWhereInput
  }

  export type CoproprietaireUpdateToOneWithWhereWithoutAppartenancesInput = {
    where?: CoproprietaireWhereInput
    data: XOR<CoproprietaireUpdateWithoutAppartenancesInput, CoproprietaireUncheckedUpdateWithoutAppartenancesInput>
  }

  export type CoproprietaireUpdateWithoutAppartenancesInput = {
    nom?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CoproprietaireUncheckedUpdateWithoutAppartenancesInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LotUpsertWithoutAppartenancesInput = {
    update: XOR<LotUpdateWithoutAppartenancesInput, LotUncheckedUpdateWithoutAppartenancesInput>
    create: XOR<LotCreateWithoutAppartenancesInput, LotUncheckedCreateWithoutAppartenancesInput>
    where?: LotWhereInput
  }

  export type LotUpdateToOneWithWhereWithoutAppartenancesInput = {
    where?: LotWhereInput
    data: XOR<LotUpdateWithoutAppartenancesInput, LotUncheckedUpdateWithoutAppartenancesInput>
  }

  export type LotUpdateWithoutAppartenancesInput = {
    numero?: StringFieldUpdateOperationsInput | string
    surface?: NullableFloatFieldUpdateOperationsInput | number | null
    copropriete?: CoproprieteUpdateOneRequiredWithoutLotsNestedInput
  }

  export type LotUncheckedUpdateWithoutAppartenancesInput = {
    id?: IntFieldUpdateOperationsInput | number
    numero?: StringFieldUpdateOperationsInput | string
    surface?: NullableFloatFieldUpdateOperationsInput | number | null
    coproprieteId?: IntFieldUpdateOperationsInput | number
  }

  export type LotCreateManyCoproprieteInput = {
    id?: number
    numero: string
    surface?: number | null
  }

  export type LotUpdateWithoutCoproprieteInput = {
    numero?: StringFieldUpdateOperationsInput | string
    surface?: NullableFloatFieldUpdateOperationsInput | number | null
    appartenances?: AppartenanceUpdateManyWithoutLotNestedInput
  }

  export type LotUncheckedUpdateWithoutCoproprieteInput = {
    id?: IntFieldUpdateOperationsInput | number
    numero?: StringFieldUpdateOperationsInput | string
    surface?: NullableFloatFieldUpdateOperationsInput | number | null
    appartenances?: AppartenanceUncheckedUpdateManyWithoutLotNestedInput
  }

  export type LotUncheckedUpdateManyWithoutCoproprieteInput = {
    id?: IntFieldUpdateOperationsInput | number
    numero?: StringFieldUpdateOperationsInput | string
    surface?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type AppartenanceCreateManyLotInput = {
    id?: number
    coproprietaireId: number
    pourcentage: number
  }

  export type AppartenanceUpdateWithoutLotInput = {
    pourcentage?: FloatFieldUpdateOperationsInput | number
    coproprietaire?: CoproprietaireUpdateOneRequiredWithoutAppartenancesNestedInput
  }

  export type AppartenanceUncheckedUpdateWithoutLotInput = {
    id?: IntFieldUpdateOperationsInput | number
    coproprietaireId?: IntFieldUpdateOperationsInput | number
    pourcentage?: FloatFieldUpdateOperationsInput | number
  }

  export type AppartenanceUncheckedUpdateManyWithoutLotInput = {
    id?: IntFieldUpdateOperationsInput | number
    coproprietaireId?: IntFieldUpdateOperationsInput | number
    pourcentage?: FloatFieldUpdateOperationsInput | number
  }

  export type AppartenanceCreateManyCoproprietaireInput = {
    id?: number
    lotId: number
    pourcentage: number
  }

  export type AppartenanceUpdateWithoutCoproprietaireInput = {
    pourcentage?: FloatFieldUpdateOperationsInput | number
    lot?: LotUpdateOneRequiredWithoutAppartenancesNestedInput
  }

  export type AppartenanceUncheckedUpdateWithoutCoproprietaireInput = {
    id?: IntFieldUpdateOperationsInput | number
    lotId?: IntFieldUpdateOperationsInput | number
    pourcentage?: FloatFieldUpdateOperationsInput | number
  }

  export type AppartenanceUncheckedUpdateManyWithoutCoproprietaireInput = {
    id?: IntFieldUpdateOperationsInput | number
    lotId?: IntFieldUpdateOperationsInput | number
    pourcentage?: FloatFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}